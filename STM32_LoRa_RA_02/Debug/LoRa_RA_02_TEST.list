
LoRa_RA_02_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080054f8  080054f8  000154f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  080057b0  080057b0  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b0  080057b0  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  080057b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000025c  08005a14  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08005a14  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008579  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a1a  00000000  00000000  000287fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  0002a218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180eb  00000000  00000000  0002b060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000718d  00000000  00000000  0004314b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083267  00000000  00000000  0004a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd53f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  000cd5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000025c 	.word	0x2000025c
 800012c:	00000000 	.word	0x00000000
 8000130:	080054e0 	.word	0x080054e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000260 	.word	0x20000260
 800014c:	080054e0 	.word	0x080054e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f945 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f002 fada 	bl	800305c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f95d 	bl	8000d92 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f925 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000088 	.word	0x20000088
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000000 	.word	0x20000000

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000310 	.word	0x20000310

08000b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000310 	.word	0x20000310

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff fff0 	bl	8000b38 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_Delay+0x40>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffe0 	bl	8000b38 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000004 	.word	0x20000004

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4906      	ldr	r1, [pc, #24]	; (8000c28 <__NVIC_EnableIRQ+0x34>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff90 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff2d 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff42 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff90 	bl	8000c80 <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5f 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff35 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e127      	b.n	8001010 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8116 	bne.w	800100a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d034      	beq.n	8000e50 <HAL_GPIO_Init+0xa4>
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d80d      	bhi.n	8000e06 <HAL_GPIO_Init+0x5a>
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d02b      	beq.n	8000e46 <HAL_GPIO_Init+0x9a>
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d804      	bhi.n	8000dfc <HAL_GPIO_Init+0x50>
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d031      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d01c      	beq.n	8000e34 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dfa:	e048      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d043      	beq.n	8000e88 <HAL_GPIO_Init+0xdc>
 8000e00:	2b11      	cmp	r3, #17
 8000e02:	d01b      	beq.n	8000e3c <HAL_GPIO_Init+0x90>
          break;
 8000e04:	e043      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e06:	4a89      	ldr	r2, [pc, #548]	; (800102c <HAL_GPIO_Init+0x280>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d026      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
 8000e0c:	4a87      	ldr	r2, [pc, #540]	; (800102c <HAL_GPIO_Init+0x280>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d806      	bhi.n	8000e20 <HAL_GPIO_Init+0x74>
 8000e12:	4a87      	ldr	r2, [pc, #540]	; (8001030 <HAL_GPIO_Init+0x284>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d020      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
 8000e18:	4a86      	ldr	r2, [pc, #536]	; (8001034 <HAL_GPIO_Init+0x288>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01d      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
          break;
 8000e1e:	e036      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e20:	4a85      	ldr	r2, [pc, #532]	; (8001038 <HAL_GPIO_Init+0x28c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
 8000e26:	4a85      	ldr	r2, [pc, #532]	; (800103c <HAL_GPIO_Init+0x290>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d016      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
 8000e2c:	4a84      	ldr	r2, [pc, #528]	; (8001040 <HAL_GPIO_Init+0x294>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0xae>
          break;
 8000e32:	e02c      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e028      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	3304      	adds	r3, #4
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e023      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e01e      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	330c      	adds	r3, #12
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e019      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e62:	2304      	movs	r3, #4
 8000e64:	623b      	str	r3, [r7, #32]
          break;
 8000e66:	e012      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e70:	2308      	movs	r3, #8
 8000e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	611a      	str	r2, [r3, #16]
          break;
 8000e7a:	e008      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	615a      	str	r2, [r3, #20]
          break;
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
          break;
 8000e8c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2bff      	cmp	r3, #255	; 0xff
 8000e92:	d801      	bhi.n	8000e98 <HAL_GPIO_Init+0xec>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	e001      	b.n	8000e9c <HAL_GPIO_Init+0xf0>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2bff      	cmp	r3, #255	; 0xff
 8000ea2:	d802      	bhi.n	8000eaa <HAL_GPIO_Init+0xfe>
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x104>
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	3b08      	subs	r3, #8
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	6a39      	ldr	r1, [r7, #32]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8096 	beq.w	800100a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ede:	4b59      	ldr	r3, [pc, #356]	; (8001044 <HAL_GPIO_Init+0x298>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a58      	ldr	r2, [pc, #352]	; (8001044 <HAL_GPIO_Init+0x298>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b56      	ldr	r3, [pc, #344]	; (8001044 <HAL_GPIO_Init+0x298>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ef6:	4a54      	ldr	r2, [pc, #336]	; (8001048 <HAL_GPIO_Init+0x29c>)
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4013      	ands	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x19e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x19a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a49      	ldr	r2, [pc, #292]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x196>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x192>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x1a0>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x1a0>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x1a0>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x1a0>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f5c:	493a      	ldr	r1, [pc, #232]	; (8001048 <HAL_GPIO_Init+0x29c>)
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4938      	ldr	r1, [pc, #224]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	4933      	ldr	r1, [pc, #204]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	492e      	ldr	r1, [pc, #184]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	604b      	str	r3, [r1, #4]
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	4929      	ldr	r1, [pc, #164]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	4924      	ldr	r1, [pc, #144]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	608b      	str	r3, [r1, #8]
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	491f      	ldr	r1, [pc, #124]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	491a      	ldr	r1, [pc, #104]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60cb      	str	r3, [r1, #12]
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	43db      	mvns	r3, r3
 8001004:	4915      	ldr	r1, [pc, #84]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8001006:	4013      	ands	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	fa22 f303 	lsr.w	r3, r2, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f aed0 	bne.w	8000dc0 <HAL_GPIO_Init+0x14>
  }
}
 8001020:	bf00      	nop
 8001022:	372c      	adds	r7, #44	; 0x2c
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	10210000 	.word	0x10210000
 8001030:	10110000 	.word	0x10110000
 8001034:	10120000 	.word	0x10120000
 8001038:	10310000 	.word	0x10310000
 800103c:	10320000 	.word	0x10320000
 8001040:	10220000 	.word	0x10220000
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	40010800 	.word	0x40010800
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40011000 	.word	0x40011000
 8001058:	40011400 	.word	0x40011400
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800107c:	e003      	b.n	8001086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	611a      	str	r2, [r3, #16]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43d9      	mvns	r1, r3
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	400b      	ands	r3, r1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 ff18 	bl	8002f18 <HAL_GPIO_EXTI_Callback>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e26c      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8087 	beq.w	8001222 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001114:	4b92      	ldr	r3, [pc, #584]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b04      	cmp	r3, #4
 800111e:	d00c      	beq.n	800113a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001120:	4b8f      	ldr	r3, [pc, #572]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	d112      	bne.n	8001152 <HAL_RCC_OscConfig+0x5e>
 800112c:	4b8c      	ldr	r3, [pc, #560]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d10b      	bne.n	8001152 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d06c      	beq.n	8001220 <HAL_RCC_OscConfig+0x12c>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d168      	bne.n	8001220 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e246      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d106      	bne.n	800116a <HAL_RCC_OscConfig+0x76>
 800115c:	4b80      	ldr	r3, [pc, #512]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a7f      	ldr	r2, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e02e      	b.n	80011c8 <HAL_RCC_OscConfig+0xd4>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a7a      	ldr	r2, [pc, #488]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b78      	ldr	r3, [pc, #480]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a77      	ldr	r2, [pc, #476]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xd4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0xbc>
 8001196:	4b72      	ldr	r3, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a71      	ldr	r2, [pc, #452]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6e      	ldr	r2, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xd4>
 80011b0:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a6a      	ldr	r2, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a67      	ldr	r2, [pc, #412]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcb2 	bl	8000b38 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcae 	bl	8000b38 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1fa      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xe4>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc9e 	bl	8000b38 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc9a 	bl	8000b38 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1e6      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x10c>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d063      	beq.n	80012f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800122e:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800123a:	4b49      	ldr	r3, [pc, #292]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b08      	cmp	r3, #8
 8001244:	d11c      	bne.n	8001280 <HAL_RCC_OscConfig+0x18c>
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x176>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e1ba      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4939      	ldr	r1, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	e03a      	b.n	80012f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fc53 	bl	8000b38 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fc4f 	bl	8000b38 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e19b      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4927      	ldr	r1, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_RCC_OscConfig+0x270>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc32 	bl	8000b38 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc2e 	bl	8000b38 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e17a      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d03a      	beq.n	8001378 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d019      	beq.n	800133e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_RCC_OscConfig+0x274>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff fc12 	bl	8000b38 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fc0e 	bl	8000b38 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e15a      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f000 faa8 	bl	800188c <RCC_Delay>
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_RCC_OscConfig+0x274>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fbf8 	bl	8000b38 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134a:	e00f      	b.n	800136c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fbf4 	bl	8000b38 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d908      	bls.n	800136c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e140      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	42420000 	.word	0x42420000
 8001368:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	4b9e      	ldr	r3, [pc, #632]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e9      	bne.n	800134c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a6 	beq.w	80014d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138a:	4b97      	ldr	r3, [pc, #604]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10d      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b94      	ldr	r3, [pc, #592]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a93      	ldr	r2, [pc, #588]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ae:	2301      	movs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	4b8e      	ldr	r3, [pc, #568]	; (80015ec <HAL_RCC_OscConfig+0x4f8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d118      	bne.n	80013f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013be:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <HAL_RCC_OscConfig+0x4f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a8a      	ldr	r2, [pc, #552]	; (80015ec <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fbb5 	bl	8000b38 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d2:	f7ff fbb1 	bl	8000b38 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0fd      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	4b81      	ldr	r3, [pc, #516]	; (80015ec <HAL_RCC_OscConfig+0x4f8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x312>
 80013f8:	4b7b      	ldr	r3, [pc, #492]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a7a      	ldr	r2, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e02d      	b.n	8001462 <HAL_RCC_OscConfig+0x36e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0x334>
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a75      	ldr	r2, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6213      	str	r3, [r2, #32]
 800141a:	4b73      	ldr	r3, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a72      	ldr	r2, [pc, #456]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6213      	str	r3, [r2, #32]
 8001426:	e01c      	b.n	8001462 <HAL_RCC_OscConfig+0x36e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b05      	cmp	r3, #5
 800142e:	d10c      	bne.n	800144a <HAL_RCC_OscConfig+0x356>
 8001430:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a69      	ldr	r2, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	e00b      	b.n	8001462 <HAL_RCC_OscConfig+0x36e>
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a66      	ldr	r2, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a63      	ldr	r2, [pc, #396]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 0304 	bic.w	r3, r3, #4
 8001460:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d015      	beq.n	8001496 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb65 	bl	8000b38 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fb61 	bl	8000b38 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e0ab      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0ee      	beq.n	8001472 <HAL_RCC_OscConfig+0x37e>
 8001494:	e014      	b.n	80014c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fb4f 	bl	8000b38 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff fb4b 	bl	8000b38 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e095      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ee      	bne.n	800149e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d105      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a47      	ldr	r2, [pc, #284]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8081 	beq.w	80015de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014dc:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d061      	beq.n	80015ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d146      	bne.n	800157e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_OscConfig+0x4fc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb1f 	bl	8000b38 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb1b 	bl	8000b38 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e067      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d108      	bne.n	8001538 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001526:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	492d      	ldr	r1, [pc, #180]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a19      	ldr	r1, [r3, #32]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	430b      	orrs	r3, r1
 800154a:	4927      	ldr	r1, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_OscConfig+0x4fc>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff faef 	bl	8000b38 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155e:	f7ff faeb 	bl	8000b38 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e037      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x46a>
 800157c:	e02f      	b.n	80015de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_RCC_OscConfig+0x4fc>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fad8 	bl	8000b38 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff fad4 	bl	8000b38 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e020      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x498>
 80015aa:	e018      	b.n	80015de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e013      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40007000 	.word	0x40007000
 80015f0:	42420060 	.word	0x42420060

080015f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0d0      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b6a      	ldr	r3, [pc, #424]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d910      	bls.n	8001638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b67      	ldr	r3, [pc, #412]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0207 	bic.w	r2, r3, #7
 800161e:	4965      	ldr	r1, [pc, #404]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0b8      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800165a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001668:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	494d      	ldr	r1, [pc, #308]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d040      	beq.n	8001714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d115      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e07f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e073      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06b      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4936      	ldr	r1, [pc, #216]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff fa28 	bl	8000b38 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff fa24 	bl	8000b38 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e053      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 020c 	and.w	r2, r3, #12
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d1eb      	bne.n	80016ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d210      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0207 	bic.w	r2, r3, #7
 800172a:	4922      	ldr	r1, [pc, #136]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e032      	b.n	80017aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4916      	ldr	r1, [pc, #88]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	490e      	ldr	r1, [pc, #56]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001782:	f000 f821 	bl	80017c8 <HAL_RCC_GetSysClockFreq>
 8001786:	4601      	mov	r1, r0
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	fa21 f303 	lsr.w	r3, r1, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_RCC_ClockConfig+0x1cc>)
 800179c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1d0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f986 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08005514 	.word	0x08005514
 80017c0:	20000088 	.word	0x20000088
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c8:	b490      	push	{r4, r7}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017d0:	1d3c      	adds	r4, r7, #4
 80017d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x40>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x46>
 8001806:	e02d      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_GetSysClockFreq+0xbc>)
 800180a:	623b      	str	r3, [r7, #32]
      break;
 800180c:	e02d      	b.n	800186a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	0c9b      	lsrs	r3, r3, #18
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800181a:	4413      	add	r3, r2
 800181c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001820:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0c5b      	lsrs	r3, r3, #17
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800183a:	4413      	add	r3, r2
 800183c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001840:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001846:	fb02 f203 	mul.w	r2, r2, r3
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	e004      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	623b      	str	r3, [r7, #32]
      break;
 8001862:	e002      	b.n	800186a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001866:	623b      	str	r3, [r7, #32]
      break;
 8001868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186a:	6a3b      	ldr	r3, [r7, #32]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bc90      	pop	{r4, r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	080054f8 	.word	0x080054f8
 800187c:	08005508 	.word	0x08005508
 8001880:	40021000 	.word	0x40021000
 8001884:	007a1200 	.word	0x007a1200
 8001888:	003d0900 	.word	0x003d0900

0800188c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <RCC_Delay+0x34>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <RCC_Delay+0x38>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0a5b      	lsrs	r3, r3, #9
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018a8:	bf00      	nop
  }
  while (Delay --);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	60fa      	str	r2, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f9      	bne.n	80018a8 <RCC_Delay+0x1c>
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000088 	.word	0x20000088
 80018c4:	10624dd3 	.word	0x10624dd3

080018c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e076      	b.n	80019c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018ea:	d009      	beq.n	8001900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
 80018f2:	e005      	b.n	8001900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f001 fb54 	bl	8002fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001984:	ea42 0103 	orr.w	r1, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	0c1a      	lsrs	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f002 0204 	and.w	r2, r2, #4
 80019a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_SPI_Transmit+0x22>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e126      	b.n	8001c40 <HAL_SPI_Transmit+0x270>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019fa:	f7ff f89d 	bl	8000b38 <HAL_GetTick>
 80019fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d002      	beq.n	8001a16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a10:	2302      	movs	r3, #2
 8001a12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a14:	e10b      	b.n	8001c2e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_SPI_Transmit+0x52>
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a26:	e102      	b.n	8001c2e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6e:	d10f      	bne.n	8001a90 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d007      	beq.n	8001aae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab6:	d14b      	bne.n	8001b50 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_SPI_Transmit+0xf6>
 8001ac0:	8afb      	ldrh	r3, [r7, #22]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d13e      	bne.n	8001b44 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	881a      	ldrh	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	1c9a      	adds	r2, r3, #2
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001aea:	e02b      	b.n	8001b44 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d112      	bne.n	8001b20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	1c9a      	adds	r2, r3, #2
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b1e:	e011      	b.n	8001b44 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b20:	f7ff f80a 	bl	8000b38 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d803      	bhi.n	8001b38 <HAL_SPI_Transmit+0x168>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d102      	bne.n	8001b3e <HAL_SPI_Transmit+0x16e>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b42:	e074      	b.n	8001c2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ce      	bne.n	8001aec <HAL_SPI_Transmit+0x11c>
 8001b4e:	e04c      	b.n	8001bea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_SPI_Transmit+0x18e>
 8001b58:	8afb      	ldrh	r3, [r7, #22]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d140      	bne.n	8001be0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	330c      	adds	r3, #12
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b84:	e02c      	b.n	8001be0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d113      	bne.n	8001bbc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bba:	e011      	b.n	8001be0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bbc:	f7fe ffbc 	bl	8000b38 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d803      	bhi.n	8001bd4 <HAL_SPI_Transmit+0x204>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d102      	bne.n	8001bda <HAL_SPI_Transmit+0x20a>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bde:	e026      	b.n	8001c2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1cd      	bne.n	8001b86 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fbc4 	bl	800237c <SPI_EndRxTxTransaction>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]
 8001c2a:	e000      	b.n	8001c2e <HAL_SPI_Transmit+0x25e>
  }

error:
 8001c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c64:	d112      	bne.n	8001c8c <HAL_SPI_Receive+0x44>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2204      	movs	r2, #4
 8001c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f8f1 	bl	8001e6a <HAL_SPI_TransmitReceive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	e0ea      	b.n	8001e62 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_SPI_Receive+0x52>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0e3      	b.n	8001e62 <HAL_SPI_Receive+0x21a>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ca2:	f7fe ff49 	bl	8000b38 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d002      	beq.n	8001cba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cb8:	e0ca      	b.n	8001e50 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_SPI_Receive+0x7e>
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cca:	e0c1      	b.n	8001e50 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	88fa      	ldrh	r2, [r7, #6]
 8001ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d12:	d10f      	bne.n	8001d34 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	d007      	beq.n	8001d52 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d162      	bne.n	8001e20 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d5a:	e02e      	b.n	8001dba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d115      	bne.n	8001d96 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f103 020c 	add.w	r2, r3, #12
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	7812      	ldrb	r2, [r2, #0]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d94:	e011      	b.n	8001dba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d96:	f7fe fecf 	bl	8000b38 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d803      	bhi.n	8001dae <HAL_SPI_Receive+0x166>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d102      	bne.n	8001db4 <HAL_SPI_Receive+0x16c>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001db8:	e04a      	b.n	8001e50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1cb      	bne.n	8001d5c <HAL_SPI_Receive+0x114>
 8001dc4:	e031      	b.n	8001e2a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d113      	bne.n	8001dfc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	b292      	uxth	r2, r2
 8001de0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	1c9a      	adds	r2, r3, #2
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dfa:	e011      	b.n	8001e20 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dfc:	f7fe fe9c 	bl	8000b38 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d803      	bhi.n	8001e14 <HAL_SPI_Receive+0x1cc>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d102      	bne.n	8001e1a <HAL_SPI_Receive+0x1d2>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e1e:	e017      	b.n	8001e50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1cd      	bne.n	8001dc6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa52 	bl	80022d8 <SPI_EndRxTransaction>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	e000      	b.n	8001e50 <HAL_SPI_Receive+0x208>
  }

error :
 8001e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b08c      	sub	sp, #48	; 0x30
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_SPI_TransmitReceive+0x26>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e18a      	b.n	80021a6 <HAL_SPI_TransmitReceive+0x33c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e98:	f7fe fe4e 	bl	8000b38 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d00f      	beq.n	8001eda <HAL_SPI_TransmitReceive+0x70>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec0:	d107      	bne.n	8001ed2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_SPI_TransmitReceive+0x68>
 8001eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d003      	beq.n	8001eda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ed8:	e15b      	b.n	8002192 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x82>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x82>
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ef2:	e14e      	b.n	8002192 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d003      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2205      	movs	r2, #5
 8001f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	887a      	ldrh	r2, [r7, #2]
 8001f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	887a      	ldrh	r2, [r7, #2]
 8001f2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d007      	beq.n	8001f5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f64:	d178      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x10a>
 8001f6e:	8b7b      	ldrh	r3, [r7, #26]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d166      	bne.n	8002042 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f98:	e053      	b.n	8002042 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_SPI_TransmitReceive+0x176>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_SPI_TransmitReceive+0x176>
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d113      	bne.n	8001fe0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	1c9a      	adds	r2, r3, #2
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d119      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x1b8>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d014      	beq.n	8002022 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	b292      	uxth	r2, r2
 8002004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	1c9a      	adds	r2, r3, #2
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800201e:	2301      	movs	r3, #1
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002022:	f7fe fd89 	bl	8000b38 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800202e:	429a      	cmp	r2, r3
 8002030:	d807      	bhi.n	8002042 <HAL_SPI_TransmitReceive+0x1d8>
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d003      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002040:	e0a7      	b.n	8002192 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1a6      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x130>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1a1      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x130>
 8002056:	e07c      	b.n	8002152 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_SPI_TransmitReceive+0x1fc>
 8002060:	8b7b      	ldrh	r3, [r7, #26]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d16b      	bne.n	800213e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800208c:	e057      	b.n	800213e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d11c      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x26c>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d017      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x26c>
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d114      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d119      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x2ae>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d014      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002114:	2301      	movs	r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002118:	f7fe fd0e 	bl	8000b38 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002124:	429a      	cmp	r2, r3
 8002126:	d803      	bhi.n	8002130 <HAL_SPI_TransmitReceive+0x2c6>
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d102      	bne.n	8002136 <HAL_SPI_TransmitReceive+0x2cc>
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800213c:	e029      	b.n	8002192 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1a2      	bne.n	800208e <HAL_SPI_TransmitReceive+0x224>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d19d      	bne.n	800208e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f910 	bl	800237c <SPI_EndRxTxTransaction>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800216e:	e010      	b.n	8002192 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	e000      	b.n	8002192 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002190:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3730      	adds	r7, #48	; 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021bc:	b2db      	uxtb	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021d8:	f7fe fcae 	bl	8000b38 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021e8:	f7fe fca6 	bl	8000b38 <HAL_GetTick>
 80021ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	0d1b      	lsrs	r3, r3, #20
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021fe:	e054      	b.n	80022aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d050      	beq.n	80022aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002208:	f7fe fc96 	bl	8000b38 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	d902      	bls.n	800221e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d13d      	bne.n	800229a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800222c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002236:	d111      	bne.n	800225c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002240:	d004      	beq.n	800224c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224a:	d107      	bne.n	800225c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002264:	d10f      	bne.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e017      	b.n	80022ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d19b      	bne.n	8002200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000088 	.word	0x20000088

080022d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ec:	d111      	bne.n	8002312 <SPI_EndRxTransaction+0x3a>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f6:	d004      	beq.n	8002302 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002300:	d107      	bne.n	8002312 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002310:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800231a:	d117      	bne.n	800234c <SPI_EndRxTransaction+0x74>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d112      	bne.n	800234c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ff49 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01a      	beq.n	8002372 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e013      	b.n	8002374 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff ff36 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e000      	b.n	8002374 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2200      	movs	r2, #0
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff ff18 	bl	80021c8 <SPI_WaitFlagStateUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f043 0220 	orr.w	r2, r3, #32
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e000      	b.n	80023b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80023b8:	b4b0      	push	{r4, r5, r7}
 80023ba:	b08f      	sub	sp, #60	; 0x3c
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80023c0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80023c6:	2307      	movs	r3, #7
 80023c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80023cc:	2307      	movs	r3, #7
 80023ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80023d8:	23ff      	movs	r3, #255	; 0xff
 80023da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80023de:	2364      	movs	r3, #100	; 0x64
 80023e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80023e4:	2308      	movs	r3, #8
 80023e6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	461d      	mov	r5, r3
 80023ec:	f107 040c 	add.w	r4, r7, #12
 80023f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	373c      	adds	r7, #60	; 0x3c
 8002404:	46bd      	mov	sp, r7
 8002406:	bcb0      	pop	{r4, r5, r7}
 8002408:	4770      	bx	lr

0800240a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8002414:	2101      	movs	r1, #1
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f99f 	bl	800275a <LoRa_read>
 800241c:	4603      	mov	r3, r0
 800241e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	f023 0307 	bic.w	r3, r3, #7
 8002430:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
 8002438:	e03e      	b.n	80024b8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10c      	bne.n	800245a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8002440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002444:	f023 0307 	bic.w	r3, r3, #7
 8002448:	b25b      	sxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b25b      	sxtb	r3, r3
 8002450:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	61da      	str	r2, [r3, #28]
 8002458:	e02e      	b.n	80024b8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d10c      	bne.n	800247a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8002460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002464:	f023 0307 	bic.w	r3, r3, #7
 8002468:	b25b      	sxtb	r3, r3
 800246a:	f043 0303 	orr.w	r3, r3, #3
 800246e:	b25b      	sxtb	r3, r3
 8002470:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	61da      	str	r2, [r3, #28]
 8002478:	e01e      	b.n	80024b8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10c      	bne.n	800249a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8002480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	b25b      	sxtb	r3, r3
 800248a:	f043 0305 	orr.w	r3, r3, #5
 800248e:	b25b      	sxtb	r3, r3
 8002490:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2205      	movs	r2, #5
 8002496:	61da      	str	r2, [r3, #28]
 8002498:	e00e      	b.n	80024b8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d10b      	bne.n	80024b8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80024a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024a4:	f023 0307 	bic.w	r3, r3, #7
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	f043 0306 	orr.w	r3, r3, #6
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2206      	movs	r2, #6
 80024b6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	461a      	mov	r2, r3
 80024bc:	2101      	movs	r1, #1
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f966 	bl	8002790 <LoRa_write>
	//HAL_Delay(10);
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fdba 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6998      	ldr	r0, [r3, #24]
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	f7ff fa6a 	bl	80019d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80024fc:	bf00      	nop
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe53 	bl	80021ae <HAL_SPI_GetState>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d1f7      	bne.n	80024fe <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6998      	ldr	r0, [r3, #24]
 8002512:	8b3a      	ldrh	r2, [r7, #24]
 8002514:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	f7ff fb95 	bl	8001c48 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800251e:	bf00      	nop
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe42 	bl	80021ae <HAL_SPI_GetState>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d1f7      	bne.n	8002520 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	889b      	ldrh	r3, [r3, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fd90 	bl	8001060 <HAL_GPIO_WritePin>
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fd7c 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6998      	ldr	r0, [r3, #24]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	f7ff fa2c 	bl	80019d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 8002578:	bf00      	nop
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fe15 	bl	80021ae <HAL_SPI_GetState>
 8002584:	4603      	mov	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d1f7      	bne.n	800257a <LoRa_writeReg+0x32>
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6998      	ldr	r0, [r3, #24]
 800258e:	8b3a      	ldrh	r2, [r7, #24]
 8002590:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	f7ff fa1b 	bl	80019d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800259a:	bf00      	nop
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe04 	bl	80021ae <HAL_SPI_GetState>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d1f7      	bne.n	800259c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	889b      	ldrh	r3, [r3, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7fe fd52 	bl	8001060 <HAL_GPIO_WritePin>
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	04db      	lsls	r3, r3, #19
 80025d2:	115b      	asrs	r3, r3, #5
 80025d4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	461a      	mov	r2, r3
 80025e0:	2106      	movs	r1, #6
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8d4 	bl	8002790 <LoRa_write>
	HAL_Delay(5);
 80025e8:	2005      	movs	r0, #5
 80025ea:	f7fe faaf 	bl	8000b4c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	461a      	mov	r2, r3
 80025f8:	2107      	movs	r1, #7
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8c8 	bl	8002790 <LoRa_write>
	HAL_Delay(5);
 8002600:	2005      	movs	r0, #5
 8002602:	f7fe faa3 	bl	8000b4c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	461a      	mov	r2, r3
 800260e:	2108      	movs	r1, #8
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8bd 	bl	8002790 <LoRa_write>
	HAL_Delay(5);
 8002616:	2005      	movs	r0, #5
 8002618:	f7fe fa98 	bl	8000b4c <HAL_Delay>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	dd01      	ble.n	8002638 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8002634:	230c      	movs	r3, #12
 8002636:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b06      	cmp	r3, #6
 800263c:	dc01      	bgt.n	8002642 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800263e:	2307      	movs	r3, #7
 8002640:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8002642:	211e      	movs	r1, #30
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f888 	bl	800275a <LoRa_read>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800264e:	200a      	movs	r0, #10
 8002650:	f7fe fa7c 	bl	8000b4c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	b2da      	uxtb	r2, r3
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	461a      	mov	r2, r3
 800266c:	211e      	movs	r1, #30
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f88e 	bl	8002790 <LoRa_write>
	HAL_Delay(10);
 8002674:	200a      	movs	r0, #10
 8002676:	f7fe fa69 	bl	8000b4c <HAL_Delay>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	461a      	mov	r2, r3
 8002692:	2109      	movs	r1, #9
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f87b 	bl	8002790 <LoRa_write>
	HAL_Delay(10);
 800269a:	200a      	movs	r0, #10
 800269c:	f7fe fa56 	bl	8000b4c <HAL_Delay>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	2b2c      	cmp	r3, #44	; 0x2c
 80026bc:	d801      	bhi.n	80026c2 <LoRa_setOCP+0x1a>
		current = 45;
 80026be:	232d      	movs	r3, #45	; 0x2d
 80026c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	2bf0      	cmp	r3, #240	; 0xf0
 80026c6:	d901      	bls.n	80026cc <LoRa_setOCP+0x24>
		current = 240;
 80026c8:	23f0      	movs	r3, #240	; 0xf0
 80026ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2b78      	cmp	r3, #120	; 0x78
 80026d0:	d809      	bhi.n	80026e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	3b2d      	subs	r3, #45	; 0x2d
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <LoRa_setOCP+0x78>)
 80026d8:	fb82 1203 	smull	r1, r2, r2, r3
 80026dc:	1052      	asrs	r2, r2, #1
 80026de:	17db      	asrs	r3, r3, #31
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e00b      	b.n	80026fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	2bf0      	cmp	r3, #240	; 0xf0
 80026ea:	d808      	bhi.n	80026fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	331e      	adds	r3, #30
 80026f0:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoRa_setOCP+0x78>)
 80026f2:	fb82 1203 	smull	r1, r2, r2, r3
 80026f6:	1092      	asrs	r2, r2, #2
 80026f8:	17db      	asrs	r3, r3, #31
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	3320      	adds	r3, #32
 8002702:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	461a      	mov	r2, r3
 8002708:	210b      	movs	r1, #11
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f840 	bl	8002790 <LoRa_write>
	HAL_Delay(10);
 8002710:	200a      	movs	r0, #10
 8002712:	f7fe fa1b 	bl	8000b4c <HAL_Delay>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	66666667 	.word	0x66666667

08002724 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800272c:	211e      	movs	r1, #30
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f813 	bl	800275a <LoRa_read>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	f043 0307 	orr.w	r3, r3, #7
 800273e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	461a      	mov	r2, r3
 8002744:	211e      	movs	r1, #30
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f822 	bl	8002790 <LoRa_write>
	HAL_Delay(10);
 800274c:	200a      	movs	r0, #10
 800274e:	f7fe f9fd 	bl	8000b4c <HAL_Delay>
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af02      	add	r7, sp, #8
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276c:	b2db      	uxtb	r3, r3
 800276e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002770:	f107 020f 	add.w	r2, r7, #15
 8002774:	f107 010e 	add.w	r1, r7, #14
 8002778:	2301      	movs	r3, #1
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	2201      	movs	r2, #1
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fea3 	bl	80024cc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
 800279c:	4613      	mov	r3, r2
 800279e:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	73bb      	strb	r3, [r7, #14]
	data = value;
 80027aa:	78bb      	ldrb	r3, [r7, #2]
 80027ac:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80027ae:	f107 020f 	add.w	r2, r7, #15
 80027b2:	f107 010e 	add.w	r1, r7, #14
 80027b6:	2301      	movs	r3, #1
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	2201      	movs	r2, #1
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fec2 	bl	8002548 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	72fb      	strb	r3, [r7, #11]
 80027dc:	4613      	mov	r3, r2
 80027de:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	889b      	ldrh	r3, [r3, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe fc33 	bl	8001060 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6998      	ldr	r0, [r3, #24]
 80027fe:	f107 0117 	add.w	r1, r7, #23
 8002802:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002806:	2201      	movs	r2, #1
 8002808:	f7ff f8e2 	bl	80019d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800280c:	bf00      	nop
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fccb 	bl	80021ae <HAL_SPI_GetState>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d1f7      	bne.n	800280e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6998      	ldr	r0, [r3, #24]
 8002822:	7abb      	ldrb	r3, [r7, #10]
 8002824:	b29a      	uxth	r2, r3
 8002826:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	f7ff f8d0 	bl	80019d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002830:	bf00      	nop
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fcb9 	bl	80021ae <HAL_SPI_GetState>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d1f7      	bne.n	8002832 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	889b      	ldrh	r3, [r3, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	4619      	mov	r1, r3
 800284e:	f7fe fc07 	bl	8001060 <HAL_GPIO_WritePin>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]

	return 1;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	4611      	mov	r1, r2
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	4613      	mov	r3, r2
 8002882:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800288a:	2101      	movs	r1, #1
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fdbc 	bl	800240a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8002892:	210e      	movs	r1, #14
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff ff60 	bl	800275a <LoRa_read>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	461a      	mov	r2, r3
 80028a2:	210d      	movs	r1, #13
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff ff73 	bl	8002790 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2122      	movs	r1, #34	; 0x22
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff ff6d 	bl	8002790 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	2100      	movs	r1, #0
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff ff85 	bl	80027cc <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80028c2:	2103      	movs	r1, #3
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fda0 	bl	800240a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80028ca:	2112      	movs	r1, #18
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff ff44 	bl	800275a <LoRa_read>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	2112      	movs	r1, #18
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff ff53 	bl	8002790 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80028ea:	6979      	ldr	r1, [r7, #20]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fd8c 	bl	800240a <LoRa_gotoMode>
			return 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80028f6:	88bb      	ldrh	r3, [r7, #4]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	80bb      	strh	r3, [r7, #4]
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002902:	6979      	ldr	r1, [r7, #20]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f7ff fd80 	bl	800240a <LoRa_gotoMode>
				return 0;
 800290a:	2300      	movs	r3, #0
 800290c:	e003      	b.n	8002916 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800290e:	2001      	movs	r0, #1
 8002910:	f7fe f91c 	bl	8000b4c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002914:	e7d9      	b.n	80028ca <LoRa_transmit+0x5c>
	}

}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002926:	2105      	movs	r1, #5
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fd6e 	bl	800240a <LoRa_gotoMode>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b089      	sub	sp, #36	; 0x24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	e007      	b.n	800295e <LoRa_receive+0x28>
		data[i]=0;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4413      	add	r3, r2
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	3301      	adds	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	429a      	cmp	r2, r3
 8002964:	dbf3      	blt.n	800294e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002966:	2101      	movs	r1, #1
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff fd4e 	bl	800240a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800296e:	2112      	movs	r1, #18
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fef2 	bl	800275a <LoRa_read>
 8002976:	4603      	mov	r3, r0
 8002978:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02f      	beq.n	80029e4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002984:	22ff      	movs	r2, #255	; 0xff
 8002986:	2112      	movs	r1, #18
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff ff01 	bl	8002790 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800298e:	2113      	movs	r1, #19
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fee2 	bl	800275a <LoRa_read>
 8002996:	4603      	mov	r3, r0
 8002998:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800299a:	2110      	movs	r1, #16
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff fedc 	bl	800275a <LoRa_read>
 80029a2:	4603      	mov	r3, r0
 80029a4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	461a      	mov	r2, r3
 80029aa:	210d      	movs	r1, #13
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff feef 	bl	8002790 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80029b2:	7cba      	ldrb	r2, [r7, #18]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4293      	cmp	r3, r2
 80029b8:	bf28      	it	cs
 80029ba:	4613      	movcs	r3, r2
 80029bc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e00b      	b.n	80029dc <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	18d4      	adds	r4, r2, r3
 80029ca:	2100      	movs	r1, #0
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff fec4 	bl	800275a <LoRa_read>
 80029d2:	4603      	mov	r3, r0
 80029d4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3301      	adds	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	dbef      	blt.n	80029c4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80029e4:	2105      	movs	r1, #5
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff fd0f 	bl	800240a <LoRa_gotoMode>
    return min;
 80029ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}

080029f6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff2b 	bl	800285a <LoRa_isvalid>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8093 	beq.w	8002b32 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fcfb 	bl	800240a <LoRa_gotoMode>
			HAL_Delay(10);
 8002a14:	200a      	movs	r0, #10
 8002a16:	f7fe f899 	bl	8000b4c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe9c 	bl	800275a <LoRa_read>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8002a26:	200a      	movs	r0, #10
 8002a28:	f7fe f890 	bl	8000b4c <HAL_Delay>
			data = read | 0x80;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a32:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	461a      	mov	r2, r3
 8002a38:	2101      	movs	r1, #1
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fea8 	bl	8002790 <LoRa_write>
			HAL_Delay(100);
 8002a40:	2064      	movs	r0, #100	; 0x64
 8002a42:	f7fe f883 	bl	8000b4c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fdb9 	bl	80025c4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fe11 	bl	8002682 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe1d 	bl	80026a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002a6e:	2223      	movs	r2, #35	; 0x23
 8002a70:	210c      	movs	r1, #12
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fe8c 	bl	8002790 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fe53 	bl	8002724 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fdcc 	bl	8002624 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	211f      	movs	r1, #31
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fe7d 	bl	8002790 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8002ab2:	7bbb      	ldrb	r3, [r7, #14]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	211d      	movs	r1, #29
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fe69 	bl	8002790 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2120      	movs	r1, #32
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fe5f 	bl	8002790 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2121      	movs	r1, #33	; 0x21
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fe57 	bl	8002790 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fe38 	bl	800275a <LoRa_read>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002af4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	461a      	mov	r2, r3
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff fe47 	bl	8002790 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002b02:	2101      	movs	r1, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fc80 	bl	800240a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8002b10:	200a      	movs	r0, #10
 8002b12:	f7fe f81b 	bl	8000b4c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002b16:	2142      	movs	r1, #66	; 0x42
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fe1e 	bl	800275a <LoRa_read>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d101      	bne.n	8002b2c <LoRa_init+0x136>
				return LORA_OK;
 8002b28:	23c8      	movs	r3, #200	; 0xc8
 8002b2a:	e004      	b.n	8002b36 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8002b2c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8002b30:	e001      	b.n	8002b36 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8002b32:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b54:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6c:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a37      	ldr	r2, [pc, #220]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b72:	f043 0320 	orr.w	r3, r3, #32
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6193      	str	r3, [r2, #24]
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <MX_GPIO_Init+0x110>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bba:	4826      	ldr	r0, [pc, #152]	; (8002c54 <MX_GPIO_Init+0x114>)
 8002bbc:	f7fe fa50 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	4824      	ldr	r0, [pc, #144]	; (8002c58 <MX_GPIO_Init+0x118>)
 8002bc6:	f7fe fa4b 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 8002bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	4619      	mov	r1, r3
 8002be2:	481c      	ldr	r0, [pc, #112]	; (8002c54 <MX_GPIO_Init+0x114>)
 8002be4:	f7fe f8e2 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8002be8:	2303      	movs	r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4816      	ldr	r0, [pc, #88]	; (8002c58 <MX_GPIO_Init+0x118>)
 8002c00:	f7fe f8d4 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_GPIO_Init+0x11c>)
 8002c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4619      	mov	r1, r3
 8002c18:	480f      	ldr	r0, [pc, #60]	; (8002c58 <MX_GPIO_Init+0x118>)
 8002c1a:	f7fe f8c7 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	4619      	mov	r1, r3
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <MX_GPIO_Init+0x118>)
 8002c34:	f7fe f8ba 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2028      	movs	r0, #40	; 0x28
 8002c3e:	f7fe f87e 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c42:	2028      	movs	r0, #40	; 0x28
 8002c44:	f7fe f897 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40011000 	.word	0x40011000
 8002c58:	40010c00 	.word	0x40010c00
 8002c5c:	10110000 	.word	0x10110000

08002c60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002c78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002c80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002c88:	e000      	b.n	8002c8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002c8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002c8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f9      	beq.n	8002c8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002c96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//-------------------------------------------------
int _write(int file, uint8_t *ptr, int len) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e009      	b.n	8002cd2 <_write+0x26>
		ITM_SendChar(*ptr++);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	60ba      	str	r2, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ffca 	bl	8002c60 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	dbf1      	blt.n	8002cbe <_write+0x12>
	}
	return len;
 8002cda:	687b      	ldr	r3, [r7, #4]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <print_RxBuffer>:
bool LoRa_intertupt = false;
bool freq = false;

int flag = 0;
int count = 0;
void print_RxBuffer() {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
	count++;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <print_RxBuffer+0x40>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <print_RxBuffer+0x40>)
 8002cf2:	6013      	str	r3, [r2, #0]

	for (int a = 0; a < 40; a++) {
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	e009      	b.n	8002d0e <print_RxBuffer+0x2a>
		printf("%c", RxBuffer[a]);
 8002cfa:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <print_RxBuffer+0x44>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fe32 	bl	800396c <putchar>
	for (int a = 0; a < 40; a++) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b27      	cmp	r3, #39	; 0x27
 8002d12:	ddf2      	ble.n	8002cfa <print_RxBuffer+0x16>
	}
	printf("\n"); //printf("|  myLoRa.frequency = %d\n", myLoRa.frequency);
 8002d14:	200a      	movs	r0, #10
 8002d16:	f000 fe29 	bl	800396c <putchar>
//		myLoRa.frequency 		 = 433;
//		LoRa_init(&myLoRa);
//		LoRa_startReceiving(&myLoRa);
	//--------------------------------------
	//}
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000300 	.word	0x20000300
 8002d28:	2000027c 	.word	0x2000027c

08002d2c <motion_cam_callback>:

void motion_cam_callback() {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
	// CHANGE LORA FREQUENCY----------------
	myLoRa.frequency = 444;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <motion_cam_callback+0x78>)
 8002d34:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8002d38:	621a      	str	r2, [r3, #32]
	LoRa_init(&myLoRa);
 8002d3a:	481a      	ldr	r0, [pc, #104]	; (8002da4 <motion_cam_callback+0x78>)
 8002d3c:	f7ff fe5b 	bl	80029f6 <LoRa_init>
	HAL_Delay(80);
 8002d40:	2050      	movs	r0, #80	; 0x50
 8002d42:	f7fd ff03 	bl	8000b4c <HAL_Delay>
	//--------------------------------------

	print_RxBuffer();
 8002d46:	f7ff ffcd 	bl	8002ce4 <print_RxBuffer>

	HAL_Delay(500);
 8002d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d4e:	f7fd fefd 	bl	8000b4c <HAL_Delay>

	for (int a = 0; a < 6; a++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	e010      	b.n	8002d7a <motion_cam_callback+0x4e>
		LoRa_transmit(&myLoRa, send_GET_DATA, 128, 100);
 8002d58:	2364      	movs	r3, #100	; 0x64
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <motion_cam_callback+0x7c>)
 8002d5e:	4811      	ldr	r0, [pc, #68]	; (8002da4 <motion_cam_callback+0x78>)
 8002d60:	f7ff fd85 	bl	800286e <LoRa_transmit>
		HAL_GPIO_TogglePin(GPIOC, LED_PC13_Pin);
 8002d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d68:	4810      	ldr	r0, [pc, #64]	; (8002dac <motion_cam_callback+0x80>)
 8002d6a:	f7fe f991 	bl	8001090 <HAL_GPIO_TogglePin>
		HAL_Delay(250);
 8002d6e:	20fa      	movs	r0, #250	; 0xfa
 8002d70:	f7fd feec 	bl	8000b4c <HAL_Delay>
	for (int a = 0; a < 6; a++) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3301      	adds	r3, #1
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	ddeb      	ble.n	8002d58 <motion_cam_callback+0x2c>
	}

	// CHANGE LORA FREQUENCY----------------
	myLoRa.frequency = 433;
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <motion_cam_callback+0x78>)
 8002d82:	f240 12b1 	movw	r2, #433	; 0x1b1
 8002d86:	621a      	str	r2, [r3, #32]
	LoRa_init(&myLoRa);
 8002d88:	4806      	ldr	r0, [pc, #24]	; (8002da4 <motion_cam_callback+0x78>)
 8002d8a:	f7ff fe34 	bl	80029f6 <LoRa_init>
	LoRa_startReceiving(&myLoRa);
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <motion_cam_callback+0x78>)
 8002d90:	f7ff fdc5 	bl	800291e <LoRa_startReceiving>
	HAL_Delay(80);
 8002d94:	2050      	movs	r0, #80	; 0x50
 8002d96:	f7fd fed9 	bl	8000b4c <HAL_Delay>
	//--------------------------------------

	//HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000314 	.word	0x20000314
 8002da8:	20000008 	.word	0x20000008
 8002dac:	40011000 	.word	0x40011000

08002db0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002db6:	f7fd fe67 	bl	8000a88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002dba:	f000 f867 	bl	8002e8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002dbe:	f7ff febf 	bl	8002b40 <MX_GPIO_Init>
	MX_SPI1_Init();
 8002dc2:	f000 f8cb 	bl	8002f5c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(100);
 8002dc6:	2064      	movs	r0, #100	; 0x64
 8002dc8:	f7fd fec0 	bl	8000b4c <HAL_Delay>

	myLoRa = newLoRa();
 8002dcc:	4c27      	ldr	r4, [pc, #156]	; (8002e6c <main+0xbc>)
 8002dce:	463b      	mov	r3, r7
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff faf1 	bl	80023b8 <newLoRa>
 8002dd6:	4625      	mov	r5, r4
 8002dd8:	463c      	mov	r4, r7
 8002dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002de6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = NSS_GPIO_Port;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <main+0xbc>)
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <main+0xc0>)
 8002dee:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <main+0xbc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <main+0xbc>)
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <main+0xc0>)
 8002dfa:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <main+0xbc>)
 8002dfe:	2202      	movs	r2, #2
 8002e00:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <main+0xbc>)
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <main+0xc0>)
 8002e06:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <main+0xbc>)
 8002e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e0e:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <main+0xbc>)
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <main+0xc4>)
 8002e14:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 433;
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <main+0xbc>)
 8002e18:	f240 12b1 	movw	r2, #433	; 0x1b1
 8002e1c:	621a      	str	r2, [r3, #32]

	if (LoRa_init(&myLoRa) == LORA_OK) {
 8002e1e:	4813      	ldr	r0, [pc, #76]	; (8002e6c <main+0xbc>)
 8002e20:	f7ff fde9 	bl	80029f6 <LoRa_init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2bc8      	cmp	r3, #200	; 0xc8
 8002e28:	d102      	bne.n	8002e30 <main+0x80>
		LoRa_state = 1;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <main+0xc8>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
	}

	LoRa_startReceiving(&myLoRa);
 8002e30:	480e      	ldr	r0, [pc, #56]	; (8002e6c <main+0xbc>)
 8002e32:	f7ff fd74 	bl	800291e <LoRa_startReceiving>

	HAL_Delay(100);
 8002e36:	2064      	movs	r0, #100	; 0x64
 8002e38:	f7fd fe88 	bl	8000b4c <HAL_Delay>

//	  LoRa_transmit(&myLoRa, led_on_command, sizeof(led_on_command), 500);
//	  HAL_GPIO_TogglePin(GPIOC, LED_PC13_Pin);
//	  HAL_Delay(500);
		//bool motion_cam_callback_flug = false;
		if (LoRa_intertupt == true) {
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <main+0xcc>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0fb      	beq.n	8002e3c <main+0x8c>
			LoRa_intertupt = false;
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <main+0xcc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]

			if (memcmp(RxBuffer, "ALLARM", 6) == 0) {
 8002e4a:	2206      	movs	r2, #6
 8002e4c:	490c      	ldr	r1, [pc, #48]	; (8002e80 <main+0xd0>)
 8002e4e:	480d      	ldr	r0, [pc, #52]	; (8002e84 <main+0xd4>)
 8002e50:	f000 fa38 	bl	80032c4 <memcmp>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <main+0x8c>
				//motion_cam_callback_flug = true;
				HAL_GPIO_TogglePin(GPIOC, LED_PC13_Pin);
 8002e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e5e:	480a      	ldr	r0, [pc, #40]	; (8002e88 <main+0xd8>)
 8002e60:	f7fe f916 	bl	8001090 <HAL_GPIO_TogglePin>

				motion_cam_callback();
 8002e64:	f7ff ff62 	bl	8002d2c <motion_cam_callback>
		if (LoRa_intertupt == true) {
 8002e68:	e7e8      	b.n	8002e3c <main+0x8c>
 8002e6a:	bf00      	nop
 8002e6c:	20000314 	.word	0x20000314
 8002e70:	40010c00 	.word	0x40010c00
 8002e74:	20000340 	.word	0x20000340
 8002e78:	20000278 	.word	0x20000278
 8002e7c:	200002fc 	.word	0x200002fc
 8002e80:	0800550c 	.word	0x0800550c
 8002e84:	2000027c 	.word	0x2000027c
 8002e88:	40011000 	.word	0x40011000

08002e8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b090      	sub	sp, #64	; 0x40
 8002e90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002e92:	f107 0318 	add.w	r3, r7, #24
 8002e96:	2228      	movs	r2, #40	; 0x28
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fa21 	bl	80032e2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002eca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ed0:	f107 0318 	add.w	r3, r7, #24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f90d 	bl	80010f4 <HAL_RCC_OscConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <SystemClock_Config+0x58>
		Error_Handler();
 8002ee0:	f000 f836 	bl	8002f50 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	2102      	movs	r1, #2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fb78 	bl	80015f4 <HAL_RCC_ClockConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <SystemClock_Config+0x82>
		Error_Handler();
 8002f0a:	f000 f821 	bl	8002f50 <Error_Handler>
	}
}
 8002f0e:	bf00      	nop
 8002f10:	3740      	adds	r7, #64	; 0x40
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DIO0_Pin) {
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d107      	bne.n	8002f3a <HAL_GPIO_EXTI_Callback+0x22>
		//HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);

		LoRa_intertupt = true;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]

		LoRa_receive(&myLoRa, RxBuffer, 128);
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	4905      	ldr	r1, [pc, #20]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x30>)
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x34>)
 8002f36:	f7ff fcfe 	bl	8002936 <LoRa_receive>
	}
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200002fc 	.word	0x200002fc
 8002f48:	2000027c 	.word	0x2000027c
 8002f4c:	20000314 	.word	0x20000314

08002f50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <MX_SPI1_Init+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f90:	2210      	movs	r2, #16
 8002f92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002fa8:	220a      	movs	r2, #10
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002fae:	f7fe fc8b 	bl	80018c8 <HAL_SPI_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fb8:	f7ff ffca 	bl	8002f50 <Error_Handler>
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000340 	.word	0x20000340
 8002fc4:	40013000 	.word	0x40013000

08002fc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_SPI_MspInit+0x88>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d12f      	bne.n	8003048 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_SPI_MspInit+0x8c>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_SPI_MspInit+0x8c>)
 8002fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ff2:	6193      	str	r3, [r2, #24]
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_SPI_MspInit+0x8c>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_SPI_MspInit+0x8c>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_SPI_MspInit+0x8c>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_SPI_MspInit+0x8c>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4619      	mov	r1, r3
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <HAL_SPI_MspInit+0x90>)
 800302c:	f7fd febe 	bl	8000dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003030:	2340      	movs	r3, #64	; 0x40
 8003032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	4619      	mov	r1, r3
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <HAL_SPI_MspInit+0x90>)
 8003044:	f7fd feb2 	bl	8000dac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003048:	bf00      	nop
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40013000 	.word	0x40013000
 8003054:	40021000 	.word	0x40021000
 8003058:	40010800 	.word	0x40010800

0800305c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_MspInit+0x5c>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_MspInit+0x5c>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6193      	str	r3, [r2, #24]
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_MspInit+0x5c>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_MspInit+0x5c>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_MspInit+0x5c>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	61d3      	str	r3, [r2, #28]
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_MspInit+0x5c>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_MspInit+0x60>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <HAL_MspInit+0x60>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <HardFault_Handler+0x4>

080030d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <MemManage_Handler+0x4>

080030d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <BusFault_Handler+0x4>

080030de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <UsageFault_Handler+0x4>

080030e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800310c:	f7fd fd02 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}

08003114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003118:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800311c:	f7fd ffd2 	bl	80010c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}

08003124 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e00a      	b.n	800314c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003136:	f3af 8000 	nop.w
 800313a:	4601      	mov	r1, r0
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	60ba      	str	r2, [r7, #8]
 8003142:	b2ca      	uxtb	r2, r1
 8003144:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	dbf0      	blt.n	8003136 <_read+0x12>
	}

return len;
 8003154:	687b      	ldr	r3, [r7, #4]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <_close>:
	}
	return len;
}

int _close(int file)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
	return -1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003184:	605a      	str	r2, [r3, #4]
	return 0;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <_isatty>:

int _isatty(int file)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
	return 1;
 800319a:	2301      	movs	r3, #1
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
	return 0;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
	...

080031c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <_sbrk+0x50>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <_sbrk+0x16>
		heap_end = &end;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <_sbrk+0x50>)
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <_sbrk+0x54>)
 80031d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <_sbrk+0x50>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <_sbrk+0x50>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	466a      	mov	r2, sp
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d907      	bls.n	80031fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80031ea:	f000 f841 	bl	8003270 <__errno>
 80031ee:	4602      	mov	r2, r0
 80031f0:	230c      	movs	r3, #12
 80031f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	e006      	b.n	8003208 <_sbrk+0x48>
	}

	heap_end += incr;
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <_sbrk+0x50>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	4a03      	ldr	r2, [pc, #12]	; (8003210 <_sbrk+0x50>)
 8003204:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000304 	.word	0x20000304
 8003214:	200003a0 	.word	0x200003a0

08003218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003224:	480c      	ldr	r0, [pc, #48]	; (8003258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003226:	490d      	ldr	r1, [pc, #52]	; (800325c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800322a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800322c:	e002      	b.n	8003234 <LoopCopyDataInit>

0800322e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003232:	3304      	adds	r3, #4

08003234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003238:	d3f9      	bcc.n	800322e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800323c:	4c0a      	ldr	r4, [pc, #40]	; (8003268 <LoopFillZerobss+0x22>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003240:	e001      	b.n	8003246 <LoopFillZerobss>

08003242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003244:	3204      	adds	r2, #4

08003246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003248:	d3fb      	bcc.n	8003242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800324a:	f7ff ffe5 	bl	8003218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324e:	f000 f815 	bl	800327c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003252:	f7ff fdad 	bl	8002db0 <main>
  bx lr
 8003256:	4770      	bx	lr
  ldr r0, =_sdata
 8003258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800325c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003260:	080057b8 	.word	0x080057b8
  ldr r2, =_sbss
 8003264:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8003268:	2000039c 	.word	0x2000039c

0800326c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC1_2_IRQHandler>
	...

08003270 <__errno>:
 8003270:	4b01      	ldr	r3, [pc, #4]	; (8003278 <__errno+0x8>)
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2000008c 	.word	0x2000008c

0800327c <__libc_init_array>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	2500      	movs	r5, #0
 8003280:	4e0c      	ldr	r6, [pc, #48]	; (80032b4 <__libc_init_array+0x38>)
 8003282:	4c0d      	ldr	r4, [pc, #52]	; (80032b8 <__libc_init_array+0x3c>)
 8003284:	1ba4      	subs	r4, r4, r6
 8003286:	10a4      	asrs	r4, r4, #2
 8003288:	42a5      	cmp	r5, r4
 800328a:	d109      	bne.n	80032a0 <__libc_init_array+0x24>
 800328c:	f002 f928 	bl	80054e0 <_init>
 8003290:	2500      	movs	r5, #0
 8003292:	4e0a      	ldr	r6, [pc, #40]	; (80032bc <__libc_init_array+0x40>)
 8003294:	4c0a      	ldr	r4, [pc, #40]	; (80032c0 <__libc_init_array+0x44>)
 8003296:	1ba4      	subs	r4, r4, r6
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	42a5      	cmp	r5, r4
 800329c:	d105      	bne.n	80032aa <__libc_init_array+0x2e>
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032a4:	4798      	blx	r3
 80032a6:	3501      	adds	r5, #1
 80032a8:	e7ee      	b.n	8003288 <__libc_init_array+0xc>
 80032aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ae:	4798      	blx	r3
 80032b0:	3501      	adds	r5, #1
 80032b2:	e7f2      	b.n	800329a <__libc_init_array+0x1e>
 80032b4:	080057b0 	.word	0x080057b0
 80032b8:	080057b0 	.word	0x080057b0
 80032bc:	080057b0 	.word	0x080057b0
 80032c0:	080057b4 	.word	0x080057b4

080032c4 <memcmp>:
 80032c4:	b530      	push	{r4, r5, lr}
 80032c6:	2400      	movs	r4, #0
 80032c8:	42a2      	cmp	r2, r4
 80032ca:	d101      	bne.n	80032d0 <memcmp+0xc>
 80032cc:	2000      	movs	r0, #0
 80032ce:	e007      	b.n	80032e0 <memcmp+0x1c>
 80032d0:	5d03      	ldrb	r3, [r0, r4]
 80032d2:	3401      	adds	r4, #1
 80032d4:	190d      	adds	r5, r1, r4
 80032d6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80032da:	42ab      	cmp	r3, r5
 80032dc:	d0f4      	beq.n	80032c8 <memcmp+0x4>
 80032de:	1b58      	subs	r0, r3, r5
 80032e0:	bd30      	pop	{r4, r5, pc}

080032e2 <memset>:
 80032e2:	4603      	mov	r3, r0
 80032e4:	4402      	add	r2, r0
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d100      	bne.n	80032ec <memset+0xa>
 80032ea:	4770      	bx	lr
 80032ec:	f803 1b01 	strb.w	r1, [r3], #1
 80032f0:	e7f9      	b.n	80032e6 <memset+0x4>

080032f2 <__cvt>:
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f8:	461e      	mov	r6, r3
 80032fa:	bfbb      	ittet	lt
 80032fc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003300:	461e      	movlt	r6, r3
 8003302:	2300      	movge	r3, #0
 8003304:	232d      	movlt	r3, #45	; 0x2d
 8003306:	b088      	sub	sp, #32
 8003308:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800330a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800330e:	f027 0720 	bic.w	r7, r7, #32
 8003312:	2f46      	cmp	r7, #70	; 0x46
 8003314:	4614      	mov	r4, r2
 8003316:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003318:	700b      	strb	r3, [r1, #0]
 800331a:	d004      	beq.n	8003326 <__cvt+0x34>
 800331c:	2f45      	cmp	r7, #69	; 0x45
 800331e:	d100      	bne.n	8003322 <__cvt+0x30>
 8003320:	3501      	adds	r5, #1
 8003322:	2302      	movs	r3, #2
 8003324:	e000      	b.n	8003328 <__cvt+0x36>
 8003326:	2303      	movs	r3, #3
 8003328:	aa07      	add	r2, sp, #28
 800332a:	9204      	str	r2, [sp, #16]
 800332c:	aa06      	add	r2, sp, #24
 800332e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003332:	e9cd 3500 	strd	r3, r5, [sp]
 8003336:	4622      	mov	r2, r4
 8003338:	4633      	mov	r3, r6
 800333a:	f000 fbb9 	bl	8003ab0 <_dtoa_r>
 800333e:	2f47      	cmp	r7, #71	; 0x47
 8003340:	4680      	mov	r8, r0
 8003342:	d102      	bne.n	800334a <__cvt+0x58>
 8003344:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003346:	07db      	lsls	r3, r3, #31
 8003348:	d526      	bpl.n	8003398 <__cvt+0xa6>
 800334a:	2f46      	cmp	r7, #70	; 0x46
 800334c:	eb08 0905 	add.w	r9, r8, r5
 8003350:	d111      	bne.n	8003376 <__cvt+0x84>
 8003352:	f898 3000 	ldrb.w	r3, [r8]
 8003356:	2b30      	cmp	r3, #48	; 0x30
 8003358:	d10a      	bne.n	8003370 <__cvt+0x7e>
 800335a:	2200      	movs	r2, #0
 800335c:	2300      	movs	r3, #0
 800335e:	4620      	mov	r0, r4
 8003360:	4631      	mov	r1, r6
 8003362:	f7fd fb21 	bl	80009a8 <__aeabi_dcmpeq>
 8003366:	b918      	cbnz	r0, 8003370 <__cvt+0x7e>
 8003368:	f1c5 0501 	rsb	r5, r5, #1
 800336c:	f8ca 5000 	str.w	r5, [sl]
 8003370:	f8da 3000 	ldr.w	r3, [sl]
 8003374:	4499      	add	r9, r3
 8003376:	2200      	movs	r2, #0
 8003378:	2300      	movs	r3, #0
 800337a:	4620      	mov	r0, r4
 800337c:	4631      	mov	r1, r6
 800337e:	f7fd fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8003382:	b938      	cbnz	r0, 8003394 <__cvt+0xa2>
 8003384:	2230      	movs	r2, #48	; 0x30
 8003386:	9b07      	ldr	r3, [sp, #28]
 8003388:	454b      	cmp	r3, r9
 800338a:	d205      	bcs.n	8003398 <__cvt+0xa6>
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	9107      	str	r1, [sp, #28]
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e7f8      	b.n	8003386 <__cvt+0x94>
 8003394:	f8cd 901c 	str.w	r9, [sp, #28]
 8003398:	4640      	mov	r0, r8
 800339a:	9b07      	ldr	r3, [sp, #28]
 800339c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800339e:	eba3 0308 	sub.w	r3, r3, r8
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	b008      	add	sp, #32
 80033a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080033aa <__exponent>:
 80033aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ac:	2900      	cmp	r1, #0
 80033ae:	bfb4      	ite	lt
 80033b0:	232d      	movlt	r3, #45	; 0x2d
 80033b2:	232b      	movge	r3, #43	; 0x2b
 80033b4:	4604      	mov	r4, r0
 80033b6:	bfb8      	it	lt
 80033b8:	4249      	neglt	r1, r1
 80033ba:	2909      	cmp	r1, #9
 80033bc:	f804 2b02 	strb.w	r2, [r4], #2
 80033c0:	7043      	strb	r3, [r0, #1]
 80033c2:	dd21      	ble.n	8003408 <__exponent+0x5e>
 80033c4:	f10d 0307 	add.w	r3, sp, #7
 80033c8:	461f      	mov	r7, r3
 80033ca:	260a      	movs	r6, #10
 80033cc:	fb91 f5f6 	sdiv	r5, r1, r6
 80033d0:	fb06 1115 	mls	r1, r6, r5, r1
 80033d4:	2d09      	cmp	r5, #9
 80033d6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80033da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80033de:	f103 32ff 	add.w	r2, r3, #4294967295
 80033e2:	4629      	mov	r1, r5
 80033e4:	dc09      	bgt.n	80033fa <__exponent+0x50>
 80033e6:	3130      	adds	r1, #48	; 0x30
 80033e8:	3b02      	subs	r3, #2
 80033ea:	f802 1c01 	strb.w	r1, [r2, #-1]
 80033ee:	42bb      	cmp	r3, r7
 80033f0:	4622      	mov	r2, r4
 80033f2:	d304      	bcc.n	80033fe <__exponent+0x54>
 80033f4:	1a10      	subs	r0, r2, r0
 80033f6:	b003      	add	sp, #12
 80033f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fa:	4613      	mov	r3, r2
 80033fc:	e7e6      	b.n	80033cc <__exponent+0x22>
 80033fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003402:	f804 2b01 	strb.w	r2, [r4], #1
 8003406:	e7f2      	b.n	80033ee <__exponent+0x44>
 8003408:	2330      	movs	r3, #48	; 0x30
 800340a:	4419      	add	r1, r3
 800340c:	7083      	strb	r3, [r0, #2]
 800340e:	1d02      	adds	r2, r0, #4
 8003410:	70c1      	strb	r1, [r0, #3]
 8003412:	e7ef      	b.n	80033f4 <__exponent+0x4a>

08003414 <_printf_float>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b091      	sub	sp, #68	; 0x44
 800341a:	460c      	mov	r4, r1
 800341c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800341e:	4693      	mov	fp, r2
 8003420:	461e      	mov	r6, r3
 8003422:	4605      	mov	r5, r0
 8003424:	f001 f9c2 	bl	80047ac <_localeconv_r>
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	9309      	str	r3, [sp, #36]	; 0x24
 800342e:	f7fc fe8f 	bl	8000150 <strlen>
 8003432:	2300      	movs	r3, #0
 8003434:	930e      	str	r3, [sp, #56]	; 0x38
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	900a      	str	r0, [sp, #40]	; 0x28
 800343a:	3307      	adds	r3, #7
 800343c:	f023 0307 	bic.w	r3, r3, #7
 8003440:	f103 0208 	add.w	r2, r3, #8
 8003444:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003448:	f8d4 a000 	ldr.w	sl, [r4]
 800344c:	603a      	str	r2, [r7, #0]
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003456:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800345a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800345e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	4ba6      	ldr	r3, [pc, #664]	; (8003700 <_printf_float+0x2ec>)
 8003466:	4638      	mov	r0, r7
 8003468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800346a:	f7fd facf 	bl	8000a0c <__aeabi_dcmpun>
 800346e:	bb68      	cbnz	r0, 80034cc <_printf_float+0xb8>
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	4ba2      	ldr	r3, [pc, #648]	; (8003700 <_printf_float+0x2ec>)
 8003476:	4638      	mov	r0, r7
 8003478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800347a:	f7fd faa9 	bl	80009d0 <__aeabi_dcmple>
 800347e:	bb28      	cbnz	r0, 80034cc <_printf_float+0xb8>
 8003480:	2200      	movs	r2, #0
 8003482:	2300      	movs	r3, #0
 8003484:	4638      	mov	r0, r7
 8003486:	4649      	mov	r1, r9
 8003488:	f7fd fa98 	bl	80009bc <__aeabi_dcmplt>
 800348c:	b110      	cbz	r0, 8003494 <_printf_float+0x80>
 800348e:	232d      	movs	r3, #45	; 0x2d
 8003490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003494:	4f9b      	ldr	r7, [pc, #620]	; (8003704 <_printf_float+0x2f0>)
 8003496:	4b9c      	ldr	r3, [pc, #624]	; (8003708 <_printf_float+0x2f4>)
 8003498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800349c:	bf98      	it	ls
 800349e:	461f      	movls	r7, r3
 80034a0:	2303      	movs	r3, #3
 80034a2:	f04f 0900 	mov.w	r9, #0
 80034a6:	6123      	str	r3, [r4, #16]
 80034a8:	f02a 0304 	bic.w	r3, sl, #4
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	9600      	str	r6, [sp, #0]
 80034b0:	465b      	mov	r3, fp
 80034b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80034b4:	4621      	mov	r1, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 f9e2 	bl	8003880 <_printf_common>
 80034bc:	3001      	adds	r0, #1
 80034be:	f040 8090 	bne.w	80035e2 <_printf_float+0x1ce>
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295
 80034c6:	b011      	add	sp, #68	; 0x44
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	463a      	mov	r2, r7
 80034ce:	464b      	mov	r3, r9
 80034d0:	4638      	mov	r0, r7
 80034d2:	4649      	mov	r1, r9
 80034d4:	f7fd fa9a 	bl	8000a0c <__aeabi_dcmpun>
 80034d8:	b110      	cbz	r0, 80034e0 <_printf_float+0xcc>
 80034da:	4f8c      	ldr	r7, [pc, #560]	; (800370c <_printf_float+0x2f8>)
 80034dc:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <_printf_float+0x2fc>)
 80034de:	e7db      	b.n	8003498 <_printf_float+0x84>
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	a80d      	add	r0, sp, #52	; 0x34
 80034ea:	a90e      	add	r1, sp, #56	; 0x38
 80034ec:	d140      	bne.n	8003570 <_printf_float+0x15c>
 80034ee:	2306      	movs	r3, #6
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	f04f 0c00 	mov.w	ip, #0
 80034f6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80034fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	463a      	mov	r2, r7
 800350a:	464b      	mov	r3, r9
 800350c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003510:	4628      	mov	r0, r5
 8003512:	f7ff feee 	bl	80032f2 <__cvt>
 8003516:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800351a:	2b47      	cmp	r3, #71	; 0x47
 800351c:	4607      	mov	r7, r0
 800351e:	d109      	bne.n	8003534 <_printf_float+0x120>
 8003520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003522:	1cd8      	adds	r0, r3, #3
 8003524:	db02      	blt.n	800352c <_printf_float+0x118>
 8003526:	6862      	ldr	r2, [r4, #4]
 8003528:	4293      	cmp	r3, r2
 800352a:	dd47      	ble.n	80035bc <_printf_float+0x1a8>
 800352c:	f1a8 0802 	sub.w	r8, r8, #2
 8003530:	fa5f f888 	uxtb.w	r8, r8
 8003534:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003538:	990d      	ldr	r1, [sp, #52]	; 0x34
 800353a:	d824      	bhi.n	8003586 <_printf_float+0x172>
 800353c:	3901      	subs	r1, #1
 800353e:	4642      	mov	r2, r8
 8003540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003544:	910d      	str	r1, [sp, #52]	; 0x34
 8003546:	f7ff ff30 	bl	80033aa <__exponent>
 800354a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800354c:	4681      	mov	r9, r0
 800354e:	1813      	adds	r3, r2, r0
 8003550:	2a01      	cmp	r2, #1
 8003552:	6123      	str	r3, [r4, #16]
 8003554:	dc02      	bgt.n	800355c <_printf_float+0x148>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	07d1      	lsls	r1, r2, #31
 800355a:	d501      	bpl.n	8003560 <_printf_float+0x14c>
 800355c:	3301      	adds	r3, #1
 800355e:	6123      	str	r3, [r4, #16]
 8003560:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0a2      	beq.n	80034ae <_printf_float+0x9a>
 8003568:	232d      	movs	r3, #45	; 0x2d
 800356a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800356e:	e79e      	b.n	80034ae <_printf_float+0x9a>
 8003570:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003574:	f000 816e 	beq.w	8003854 <_printf_float+0x440>
 8003578:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800357c:	d1b9      	bne.n	80034f2 <_printf_float+0xde>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1b7      	bne.n	80034f2 <_printf_float+0xde>
 8003582:	2301      	movs	r3, #1
 8003584:	e7b4      	b.n	80034f0 <_printf_float+0xdc>
 8003586:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800358a:	d119      	bne.n	80035c0 <_printf_float+0x1ac>
 800358c:	2900      	cmp	r1, #0
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	dd0c      	ble.n	80035ac <_printf_float+0x198>
 8003592:	6121      	str	r1, [r4, #16]
 8003594:	b913      	cbnz	r3, 800359c <_printf_float+0x188>
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	07d2      	lsls	r2, r2, #31
 800359a:	d502      	bpl.n	80035a2 <_printf_float+0x18e>
 800359c:	3301      	adds	r3, #1
 800359e:	440b      	add	r3, r1
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035a4:	f04f 0900 	mov.w	r9, #0
 80035a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80035aa:	e7d9      	b.n	8003560 <_printf_float+0x14c>
 80035ac:	b913      	cbnz	r3, 80035b4 <_printf_float+0x1a0>
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	07d0      	lsls	r0, r2, #31
 80035b2:	d501      	bpl.n	80035b8 <_printf_float+0x1a4>
 80035b4:	3302      	adds	r3, #2
 80035b6:	e7f3      	b.n	80035a0 <_printf_float+0x18c>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e7f1      	b.n	80035a0 <_printf_float+0x18c>
 80035bc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80035c0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80035c4:	4293      	cmp	r3, r2
 80035c6:	db05      	blt.n	80035d4 <_printf_float+0x1c0>
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	07d1      	lsls	r1, r2, #31
 80035ce:	d5e8      	bpl.n	80035a2 <_printf_float+0x18e>
 80035d0:	3301      	adds	r3, #1
 80035d2:	e7e5      	b.n	80035a0 <_printf_float+0x18c>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bfcc      	ite	gt
 80035d8:	2301      	movgt	r3, #1
 80035da:	f1c3 0302 	rsble	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	e7de      	b.n	80035a0 <_printf_float+0x18c>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	055a      	lsls	r2, r3, #21
 80035e6:	d407      	bmi.n	80035f8 <_printf_float+0x1e4>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	463a      	mov	r2, r7
 80035ec:	4659      	mov	r1, fp
 80035ee:	4628      	mov	r0, r5
 80035f0:	47b0      	blx	r6
 80035f2:	3001      	adds	r0, #1
 80035f4:	d129      	bne.n	800364a <_printf_float+0x236>
 80035f6:	e764      	b.n	80034c2 <_printf_float+0xae>
 80035f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80035fc:	f240 80d7 	bls.w	80037ae <_printf_float+0x39a>
 8003600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003604:	2200      	movs	r2, #0
 8003606:	2300      	movs	r3, #0
 8003608:	f7fd f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800360c:	b388      	cbz	r0, 8003672 <_printf_float+0x25e>
 800360e:	2301      	movs	r3, #1
 8003610:	4a40      	ldr	r2, [pc, #256]	; (8003714 <_printf_float+0x300>)
 8003612:	4659      	mov	r1, fp
 8003614:	4628      	mov	r0, r5
 8003616:	47b0      	blx	r6
 8003618:	3001      	adds	r0, #1
 800361a:	f43f af52 	beq.w	80034c2 <_printf_float+0xae>
 800361e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003622:	429a      	cmp	r2, r3
 8003624:	db02      	blt.n	800362c <_printf_float+0x218>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	07d8      	lsls	r0, r3, #31
 800362a:	d50e      	bpl.n	800364a <_printf_float+0x236>
 800362c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003630:	4659      	mov	r1, fp
 8003632:	4628      	mov	r0, r5
 8003634:	47b0      	blx	r6
 8003636:	3001      	adds	r0, #1
 8003638:	f43f af43 	beq.w	80034c2 <_printf_float+0xae>
 800363c:	2700      	movs	r7, #0
 800363e:	f104 081a 	add.w	r8, r4, #26
 8003642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003644:	3b01      	subs	r3, #1
 8003646:	42bb      	cmp	r3, r7
 8003648:	dc09      	bgt.n	800365e <_printf_float+0x24a>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	079f      	lsls	r7, r3, #30
 800364e:	f100 80fd 	bmi.w	800384c <_printf_float+0x438>
 8003652:	68e0      	ldr	r0, [r4, #12]
 8003654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003656:	4298      	cmp	r0, r3
 8003658:	bfb8      	it	lt
 800365a:	4618      	movlt	r0, r3
 800365c:	e733      	b.n	80034c6 <_printf_float+0xb2>
 800365e:	2301      	movs	r3, #1
 8003660:	4642      	mov	r2, r8
 8003662:	4659      	mov	r1, fp
 8003664:	4628      	mov	r0, r5
 8003666:	47b0      	blx	r6
 8003668:	3001      	adds	r0, #1
 800366a:	f43f af2a 	beq.w	80034c2 <_printf_float+0xae>
 800366e:	3701      	adds	r7, #1
 8003670:	e7e7      	b.n	8003642 <_printf_float+0x22e>
 8003672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	dc2b      	bgt.n	80036d0 <_printf_float+0x2bc>
 8003678:	2301      	movs	r3, #1
 800367a:	4a26      	ldr	r2, [pc, #152]	; (8003714 <_printf_float+0x300>)
 800367c:	4659      	mov	r1, fp
 800367e:	4628      	mov	r0, r5
 8003680:	47b0      	blx	r6
 8003682:	3001      	adds	r0, #1
 8003684:	f43f af1d 	beq.w	80034c2 <_printf_float+0xae>
 8003688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800368a:	b923      	cbnz	r3, 8003696 <_printf_float+0x282>
 800368c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800368e:	b913      	cbnz	r3, 8003696 <_printf_float+0x282>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	07d9      	lsls	r1, r3, #31
 8003694:	d5d9      	bpl.n	800364a <_printf_float+0x236>
 8003696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800369a:	4659      	mov	r1, fp
 800369c:	4628      	mov	r0, r5
 800369e:	47b0      	blx	r6
 80036a0:	3001      	adds	r0, #1
 80036a2:	f43f af0e 	beq.w	80034c2 <_printf_float+0xae>
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	f104 091a 	add.w	r9, r4, #26
 80036ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036b0:	425b      	negs	r3, r3
 80036b2:	4543      	cmp	r3, r8
 80036b4:	dc01      	bgt.n	80036ba <_printf_float+0x2a6>
 80036b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036b8:	e797      	b.n	80035ea <_printf_float+0x1d6>
 80036ba:	2301      	movs	r3, #1
 80036bc:	464a      	mov	r2, r9
 80036be:	4659      	mov	r1, fp
 80036c0:	4628      	mov	r0, r5
 80036c2:	47b0      	blx	r6
 80036c4:	3001      	adds	r0, #1
 80036c6:	f43f aefc 	beq.w	80034c2 <_printf_float+0xae>
 80036ca:	f108 0801 	add.w	r8, r8, #1
 80036ce:	e7ee      	b.n	80036ae <_printf_float+0x29a>
 80036d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036d4:	429a      	cmp	r2, r3
 80036d6:	bfa8      	it	ge
 80036d8:	461a      	movge	r2, r3
 80036da:	2a00      	cmp	r2, #0
 80036dc:	4690      	mov	r8, r2
 80036de:	dd07      	ble.n	80036f0 <_printf_float+0x2dc>
 80036e0:	4613      	mov	r3, r2
 80036e2:	4659      	mov	r1, fp
 80036e4:	463a      	mov	r2, r7
 80036e6:	4628      	mov	r0, r5
 80036e8:	47b0      	blx	r6
 80036ea:	3001      	adds	r0, #1
 80036ec:	f43f aee9 	beq.w	80034c2 <_printf_float+0xae>
 80036f0:	f104 031a 	add.w	r3, r4, #26
 80036f4:	f04f 0a00 	mov.w	sl, #0
 80036f8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80036fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80036fe:	e015      	b.n	800372c <_printf_float+0x318>
 8003700:	7fefffff 	.word	0x7fefffff
 8003704:	0800552c 	.word	0x0800552c
 8003708:	08005528 	.word	0x08005528
 800370c:	08005534 	.word	0x08005534
 8003710:	08005530 	.word	0x08005530
 8003714:	08005538 	.word	0x08005538
 8003718:	2301      	movs	r3, #1
 800371a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800371c:	4659      	mov	r1, fp
 800371e:	4628      	mov	r0, r5
 8003720:	47b0      	blx	r6
 8003722:	3001      	adds	r0, #1
 8003724:	f43f aecd 	beq.w	80034c2 <_printf_float+0xae>
 8003728:	f10a 0a01 	add.w	sl, sl, #1
 800372c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003730:	eba9 0308 	sub.w	r3, r9, r8
 8003734:	4553      	cmp	r3, sl
 8003736:	dcef      	bgt.n	8003718 <_printf_float+0x304>
 8003738:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800373c:	429a      	cmp	r2, r3
 800373e:	444f      	add	r7, r9
 8003740:	db14      	blt.n	800376c <_printf_float+0x358>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07da      	lsls	r2, r3, #31
 8003746:	d411      	bmi.n	800376c <_printf_float+0x358>
 8003748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800374a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800374c:	eba3 0209 	sub.w	r2, r3, r9
 8003750:	eba3 0901 	sub.w	r9, r3, r1
 8003754:	4591      	cmp	r9, r2
 8003756:	bfa8      	it	ge
 8003758:	4691      	movge	r9, r2
 800375a:	f1b9 0f00 	cmp.w	r9, #0
 800375e:	dc0d      	bgt.n	800377c <_printf_float+0x368>
 8003760:	2700      	movs	r7, #0
 8003762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003766:	f104 081a 	add.w	r8, r4, #26
 800376a:	e018      	b.n	800379e <_printf_float+0x38a>
 800376c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003770:	4659      	mov	r1, fp
 8003772:	4628      	mov	r0, r5
 8003774:	47b0      	blx	r6
 8003776:	3001      	adds	r0, #1
 8003778:	d1e6      	bne.n	8003748 <_printf_float+0x334>
 800377a:	e6a2      	b.n	80034c2 <_printf_float+0xae>
 800377c:	464b      	mov	r3, r9
 800377e:	463a      	mov	r2, r7
 8003780:	4659      	mov	r1, fp
 8003782:	4628      	mov	r0, r5
 8003784:	47b0      	blx	r6
 8003786:	3001      	adds	r0, #1
 8003788:	d1ea      	bne.n	8003760 <_printf_float+0x34c>
 800378a:	e69a      	b.n	80034c2 <_printf_float+0xae>
 800378c:	2301      	movs	r3, #1
 800378e:	4642      	mov	r2, r8
 8003790:	4659      	mov	r1, fp
 8003792:	4628      	mov	r0, r5
 8003794:	47b0      	blx	r6
 8003796:	3001      	adds	r0, #1
 8003798:	f43f ae93 	beq.w	80034c2 <_printf_float+0xae>
 800379c:	3701      	adds	r7, #1
 800379e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	eba3 0309 	sub.w	r3, r3, r9
 80037a8:	42bb      	cmp	r3, r7
 80037aa:	dcef      	bgt.n	800378c <_printf_float+0x378>
 80037ac:	e74d      	b.n	800364a <_printf_float+0x236>
 80037ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037b0:	2a01      	cmp	r2, #1
 80037b2:	dc01      	bgt.n	80037b8 <_printf_float+0x3a4>
 80037b4:	07db      	lsls	r3, r3, #31
 80037b6:	d538      	bpl.n	800382a <_printf_float+0x416>
 80037b8:	2301      	movs	r3, #1
 80037ba:	463a      	mov	r2, r7
 80037bc:	4659      	mov	r1, fp
 80037be:	4628      	mov	r0, r5
 80037c0:	47b0      	blx	r6
 80037c2:	3001      	adds	r0, #1
 80037c4:	f43f ae7d 	beq.w	80034c2 <_printf_float+0xae>
 80037c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037cc:	4659      	mov	r1, fp
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b0      	blx	r6
 80037d2:	3001      	adds	r0, #1
 80037d4:	f107 0701 	add.w	r7, r7, #1
 80037d8:	f43f ae73 	beq.w	80034c2 <_printf_float+0xae>
 80037dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037e2:	2200      	movs	r2, #0
 80037e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80037e8:	2300      	movs	r3, #0
 80037ea:	f7fd f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80037ee:	b9c0      	cbnz	r0, 8003822 <_printf_float+0x40e>
 80037f0:	4643      	mov	r3, r8
 80037f2:	463a      	mov	r2, r7
 80037f4:	4659      	mov	r1, fp
 80037f6:	4628      	mov	r0, r5
 80037f8:	47b0      	blx	r6
 80037fa:	3001      	adds	r0, #1
 80037fc:	d10d      	bne.n	800381a <_printf_float+0x406>
 80037fe:	e660      	b.n	80034c2 <_printf_float+0xae>
 8003800:	2301      	movs	r3, #1
 8003802:	4642      	mov	r2, r8
 8003804:	4659      	mov	r1, fp
 8003806:	4628      	mov	r0, r5
 8003808:	47b0      	blx	r6
 800380a:	3001      	adds	r0, #1
 800380c:	f43f ae59 	beq.w	80034c2 <_printf_float+0xae>
 8003810:	3701      	adds	r7, #1
 8003812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003814:	3b01      	subs	r3, #1
 8003816:	42bb      	cmp	r3, r7
 8003818:	dcf2      	bgt.n	8003800 <_printf_float+0x3ec>
 800381a:	464b      	mov	r3, r9
 800381c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003820:	e6e4      	b.n	80035ec <_printf_float+0x1d8>
 8003822:	2700      	movs	r7, #0
 8003824:	f104 081a 	add.w	r8, r4, #26
 8003828:	e7f3      	b.n	8003812 <_printf_float+0x3fe>
 800382a:	2301      	movs	r3, #1
 800382c:	e7e1      	b.n	80037f2 <_printf_float+0x3de>
 800382e:	2301      	movs	r3, #1
 8003830:	4642      	mov	r2, r8
 8003832:	4659      	mov	r1, fp
 8003834:	4628      	mov	r0, r5
 8003836:	47b0      	blx	r6
 8003838:	3001      	adds	r0, #1
 800383a:	f43f ae42 	beq.w	80034c2 <_printf_float+0xae>
 800383e:	3701      	adds	r7, #1
 8003840:	68e3      	ldr	r3, [r4, #12]
 8003842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	42bb      	cmp	r3, r7
 8003848:	dcf1      	bgt.n	800382e <_printf_float+0x41a>
 800384a:	e702      	b.n	8003652 <_printf_float+0x23e>
 800384c:	2700      	movs	r7, #0
 800384e:	f104 0819 	add.w	r8, r4, #25
 8003852:	e7f5      	b.n	8003840 <_printf_float+0x42c>
 8003854:	2b00      	cmp	r3, #0
 8003856:	f43f ae94 	beq.w	8003582 <_printf_float+0x16e>
 800385a:	f04f 0c00 	mov.w	ip, #0
 800385e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003862:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800386c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	463a      	mov	r2, r7
 8003874:	464b      	mov	r3, r9
 8003876:	4628      	mov	r0, r5
 8003878:	f7ff fd3b 	bl	80032f2 <__cvt>
 800387c:	4607      	mov	r7, r0
 800387e:	e64f      	b.n	8003520 <_printf_float+0x10c>

08003880 <_printf_common>:
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	4691      	mov	r9, r2
 8003886:	461f      	mov	r7, r3
 8003888:	688a      	ldr	r2, [r1, #8]
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	4606      	mov	r6, r0
 800388e:	4293      	cmp	r3, r2
 8003890:	bfb8      	it	lt
 8003892:	4613      	movlt	r3, r2
 8003894:	f8c9 3000 	str.w	r3, [r9]
 8003898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800389c:	460c      	mov	r4, r1
 800389e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a2:	b112      	cbz	r2, 80038aa <_printf_common+0x2a>
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8c9 3000 	str.w	r3, [r9]
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	0699      	lsls	r1, r3, #26
 80038ae:	bf42      	ittt	mi
 80038b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038b4:	3302      	addmi	r3, #2
 80038b6:	f8c9 3000 	strmi.w	r3, [r9]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	f015 0506 	ands.w	r5, r5, #6
 80038c0:	d107      	bne.n	80038d2 <_printf_common+0x52>
 80038c2:	f104 0a19 	add.w	sl, r4, #25
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	f8d9 2000 	ldr.w	r2, [r9]
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	42ab      	cmp	r3, r5
 80038d0:	dc29      	bgt.n	8003926 <_printf_common+0xa6>
 80038d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	3300      	adds	r3, #0
 80038da:	bf18      	it	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	0692      	lsls	r2, r2, #26
 80038e0:	d42e      	bmi.n	8003940 <_printf_common+0xc0>
 80038e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e6:	4639      	mov	r1, r7
 80038e8:	4630      	mov	r0, r6
 80038ea:	47c0      	blx	r8
 80038ec:	3001      	adds	r0, #1
 80038ee:	d021      	beq.n	8003934 <_printf_common+0xb4>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	68e5      	ldr	r5, [r4, #12]
 80038f4:	f003 0306 	and.w	r3, r3, #6
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	bf18      	it	ne
 80038fc:	2500      	movne	r5, #0
 80038fe:	f8d9 2000 	ldr.w	r2, [r9]
 8003902:	f04f 0900 	mov.w	r9, #0
 8003906:	bf08      	it	eq
 8003908:	1aad      	subeq	r5, r5, r2
 800390a:	68a3      	ldr	r3, [r4, #8]
 800390c:	6922      	ldr	r2, [r4, #16]
 800390e:	bf08      	it	eq
 8003910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003914:	4293      	cmp	r3, r2
 8003916:	bfc4      	itt	gt
 8003918:	1a9b      	subgt	r3, r3, r2
 800391a:	18ed      	addgt	r5, r5, r3
 800391c:	341a      	adds	r4, #26
 800391e:	454d      	cmp	r5, r9
 8003920:	d11a      	bne.n	8003958 <_printf_common+0xd8>
 8003922:	2000      	movs	r0, #0
 8003924:	e008      	b.n	8003938 <_printf_common+0xb8>
 8003926:	2301      	movs	r3, #1
 8003928:	4652      	mov	r2, sl
 800392a:	4639      	mov	r1, r7
 800392c:	4630      	mov	r0, r6
 800392e:	47c0      	blx	r8
 8003930:	3001      	adds	r0, #1
 8003932:	d103      	bne.n	800393c <_printf_common+0xbc>
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393c:	3501      	adds	r5, #1
 800393e:	e7c2      	b.n	80038c6 <_printf_common+0x46>
 8003940:	2030      	movs	r0, #48	; 0x30
 8003942:	18e1      	adds	r1, r4, r3
 8003944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800394e:	4422      	add	r2, r4
 8003950:	3302      	adds	r3, #2
 8003952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003956:	e7c4      	b.n	80038e2 <_printf_common+0x62>
 8003958:	2301      	movs	r3, #1
 800395a:	4622      	mov	r2, r4
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	47c0      	blx	r8
 8003962:	3001      	adds	r0, #1
 8003964:	d0e6      	beq.n	8003934 <_printf_common+0xb4>
 8003966:	f109 0901 	add.w	r9, r9, #1
 800396a:	e7d8      	b.n	800391e <_printf_common+0x9e>

0800396c <putchar>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <putchar+0x24>)
 8003970:	4605      	mov	r5, r0
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	b124      	cbz	r4, 8003980 <putchar+0x14>
 8003976:	69a3      	ldr	r3, [r4, #24]
 8003978:	b913      	cbnz	r3, 8003980 <putchar+0x14>
 800397a:	4620      	mov	r0, r4
 800397c:	f000 fe8c 	bl	8004698 <__sinit>
 8003980:	68a2      	ldr	r2, [r4, #8]
 8003982:	4629      	mov	r1, r5
 8003984:	4620      	mov	r0, r4
 8003986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800398a:	f001 bac1 	b.w	8004f10 <_putc_r>
 800398e:	bf00      	nop
 8003990:	2000008c 	.word	0x2000008c

08003994 <quorem>:
 8003994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	6903      	ldr	r3, [r0, #16]
 800399a:	690c      	ldr	r4, [r1, #16]
 800399c:	4680      	mov	r8, r0
 800399e:	42a3      	cmp	r3, r4
 80039a0:	f2c0 8084 	blt.w	8003aac <quorem+0x118>
 80039a4:	3c01      	subs	r4, #1
 80039a6:	f101 0714 	add.w	r7, r1, #20
 80039aa:	f100 0614 	add.w	r6, r0, #20
 80039ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80039b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80039b6:	3501      	adds	r5, #1
 80039b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80039bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80039c0:	eb06 030c 	add.w	r3, r6, ip
 80039c4:	eb07 090c 	add.w	r9, r7, ip
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	b39d      	cbz	r5, 8003a34 <quorem+0xa0>
 80039cc:	f04f 0a00 	mov.w	sl, #0
 80039d0:	4638      	mov	r0, r7
 80039d2:	46b6      	mov	lr, r6
 80039d4:	46d3      	mov	fp, sl
 80039d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80039da:	b293      	uxth	r3, r2
 80039dc:	fb05 a303 	mla	r3, r5, r3, sl
 80039e0:	0c12      	lsrs	r2, r2, #16
 80039e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039e6:	fb05 a202 	mla	r2, r5, r2, sl
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	ebab 0303 	sub.w	r3, fp, r3
 80039f0:	f8de b000 	ldr.w	fp, [lr]
 80039f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80039f8:	fa1f fb8b 	uxth.w	fp, fp
 80039fc:	445b      	add	r3, fp
 80039fe:	fa1f fb82 	uxth.w	fp, r2
 8003a02:	f8de 2000 	ldr.w	r2, [lr]
 8003a06:	4581      	cmp	r9, r0
 8003a08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a16:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003a1a:	f84e 3b04 	str.w	r3, [lr], #4
 8003a1e:	d2da      	bcs.n	80039d6 <quorem+0x42>
 8003a20:	f856 300c 	ldr.w	r3, [r6, ip]
 8003a24:	b933      	cbnz	r3, 8003a34 <quorem+0xa0>
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	3b04      	subs	r3, #4
 8003a2a:	429e      	cmp	r6, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	d331      	bcc.n	8003a94 <quorem+0x100>
 8003a30:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a34:	4640      	mov	r0, r8
 8003a36:	f001 f8ef 	bl	8004c18 <__mcmp>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	db26      	blt.n	8003a8c <quorem+0xf8>
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f04f 0c00 	mov.w	ip, #0
 8003a44:	3501      	adds	r5, #1
 8003a46:	f857 1b04 	ldr.w	r1, [r7], #4
 8003a4a:	f8d0 e000 	ldr.w	lr, [r0]
 8003a4e:	b28b      	uxth	r3, r1
 8003a50:	ebac 0303 	sub.w	r3, ip, r3
 8003a54:	fa1f f28e 	uxth.w	r2, lr
 8003a58:	4413      	add	r3, r2
 8003a5a:	0c0a      	lsrs	r2, r1, #16
 8003a5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a6a:	45b9      	cmp	r9, r7
 8003a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a70:	f840 3b04 	str.w	r3, [r0], #4
 8003a74:	d2e7      	bcs.n	8003a46 <quorem+0xb2>
 8003a76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003a7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003a7e:	b92a      	cbnz	r2, 8003a8c <quorem+0xf8>
 8003a80:	3b04      	subs	r3, #4
 8003a82:	429e      	cmp	r6, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	d30b      	bcc.n	8003aa0 <quorem+0x10c>
 8003a88:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	b003      	add	sp, #12
 8003a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	3b04      	subs	r3, #4
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	d1c9      	bne.n	8003a30 <quorem+0x9c>
 8003a9c:	3c01      	subs	r4, #1
 8003a9e:	e7c4      	b.n	8003a2a <quorem+0x96>
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d1ef      	bne.n	8003a88 <quorem+0xf4>
 8003aa8:	3c01      	subs	r4, #1
 8003aaa:	e7ea      	b.n	8003a82 <quorem+0xee>
 8003aac:	2000      	movs	r0, #0
 8003aae:	e7ee      	b.n	8003a8e <quorem+0xfa>

08003ab0 <_dtoa_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	461f      	mov	r7, r3
 8003ab8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003aba:	b095      	sub	sp, #84	; 0x54
 8003abc:	4604      	mov	r4, r0
 8003abe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003ac2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003ac6:	b93d      	cbnz	r5, 8003ad8 <_dtoa_r+0x28>
 8003ac8:	2010      	movs	r0, #16
 8003aca:	f000 fe7d 	bl	80047c8 <malloc>
 8003ace:	6260      	str	r0, [r4, #36]	; 0x24
 8003ad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ad4:	6005      	str	r5, [r0, #0]
 8003ad6:	60c5      	str	r5, [r0, #12]
 8003ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	b151      	cbz	r1, 8003af4 <_dtoa_r+0x44>
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	4093      	lsls	r3, r2
 8003ae4:	604a      	str	r2, [r1, #4]
 8003ae6:	608b      	str	r3, [r1, #8]
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f000 feb4 	bl	8004856 <_Bfree>
 8003aee:	2200      	movs	r2, #0
 8003af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	1e3b      	subs	r3, r7, #0
 8003af6:	bfaf      	iteee	ge
 8003af8:	2300      	movge	r3, #0
 8003afa:	2201      	movlt	r2, #1
 8003afc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b00:	9303      	strlt	r3, [sp, #12]
 8003b02:	bfac      	ite	ge
 8003b04:	f8c8 3000 	strge.w	r3, [r8]
 8003b08:	f8c8 2000 	strlt.w	r2, [r8]
 8003b0c:	4bae      	ldr	r3, [pc, #696]	; (8003dc8 <_dtoa_r+0x318>)
 8003b0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003b12:	ea33 0308 	bics.w	r3, r3, r8
 8003b16:	d11b      	bne.n	8003b50 <_dtoa_r+0xa0>
 8003b18:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	9b02      	ldr	r3, [sp, #8]
 8003b22:	b923      	cbnz	r3, 8003b2e <_dtoa_r+0x7e>
 8003b24:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	f000 8545 	beq.w	80045b8 <_dtoa_r+0xb08>
 8003b2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b30:	b953      	cbnz	r3, 8003b48 <_dtoa_r+0x98>
 8003b32:	4ba6      	ldr	r3, [pc, #664]	; (8003dcc <_dtoa_r+0x31c>)
 8003b34:	e021      	b.n	8003b7a <_dtoa_r+0xca>
 8003b36:	4ba6      	ldr	r3, [pc, #664]	; (8003dd0 <_dtoa_r+0x320>)
 8003b38:	9306      	str	r3, [sp, #24]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	9806      	ldr	r0, [sp, #24]
 8003b42:	b015      	add	sp, #84	; 0x54
 8003b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b48:	4ba0      	ldr	r3, [pc, #640]	; (8003dcc <_dtoa_r+0x31c>)
 8003b4a:	9306      	str	r3, [sp, #24]
 8003b4c:	3303      	adds	r3, #3
 8003b4e:	e7f5      	b.n	8003b3c <_dtoa_r+0x8c>
 8003b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2300      	movs	r3, #0
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	f7fc ff24 	bl	80009a8 <__aeabi_dcmpeq>
 8003b60:	4682      	mov	sl, r0
 8003b62:	b160      	cbz	r0, 8003b7e <_dtoa_r+0xce>
 8003b64:	2301      	movs	r3, #1
 8003b66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8520 	beq.w	80045b2 <_dtoa_r+0xb02>
 8003b72:	4b98      	ldr	r3, [pc, #608]	; (8003dd4 <_dtoa_r+0x324>)
 8003b74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	9306      	str	r3, [sp, #24]
 8003b7c:	e7e0      	b.n	8003b40 <_dtoa_r+0x90>
 8003b7e:	ab12      	add	r3, sp, #72	; 0x48
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	ab13      	add	r3, sp, #76	; 0x4c
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4632      	mov	r2, r6
 8003b88:	463b      	mov	r3, r7
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f001 f8bc 	bl	8004d08 <__d2b>
 8003b90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003b94:	4683      	mov	fp, r0
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	d07d      	beq.n	8003c96 <_dtoa_r+0x1e6>
 8003b9a:	46b0      	mov	r8, r6
 8003b9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003ba0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003ba4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003ba8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003bac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <_dtoa_r+0x328>)
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	f7fc fad6 	bl	8000168 <__aeabi_dsub>
 8003bbc:	a37c      	add	r3, pc, #496	; (adr r3, 8003db0 <_dtoa_r+0x300>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fc89 	bl	80004d8 <__aeabi_dmul>
 8003bc6:	a37c      	add	r3, pc, #496	; (adr r3, 8003db8 <_dtoa_r+0x308>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc face 	bl	800016c <__adddf3>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	460f      	mov	r7, r1
 8003bd6:	f7fc fc15 	bl	8000404 <__aeabi_i2d>
 8003bda:	a379      	add	r3, pc, #484	; (adr r3, 8003dc0 <_dtoa_r+0x310>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fc7a 	bl	80004d8 <__aeabi_dmul>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4630      	mov	r0, r6
 8003bea:	4639      	mov	r1, r7
 8003bec:	f7fc fabe 	bl	800016c <__adddf3>
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	460f      	mov	r7, r1
 8003bf4:	f7fc ff20 	bl	8000a38 <__aeabi_d2iz>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4682      	mov	sl, r0
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4630      	mov	r0, r6
 8003c00:	4639      	mov	r1, r7
 8003c02:	f7fc fedb 	bl	80009bc <__aeabi_dcmplt>
 8003c06:	b148      	cbz	r0, 8003c1c <_dtoa_r+0x16c>
 8003c08:	4650      	mov	r0, sl
 8003c0a:	f7fc fbfb 	bl	8000404 <__aeabi_i2d>
 8003c0e:	4632      	mov	r2, r6
 8003c10:	463b      	mov	r3, r7
 8003c12:	f7fc fec9 	bl	80009a8 <__aeabi_dcmpeq>
 8003c16:	b908      	cbnz	r0, 8003c1c <_dtoa_r+0x16c>
 8003c18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c1c:	f1ba 0f16 	cmp.w	sl, #22
 8003c20:	d85a      	bhi.n	8003cd8 <_dtoa_r+0x228>
 8003c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c26:	496d      	ldr	r1, [pc, #436]	; (8003ddc <_dtoa_r+0x32c>)
 8003c28:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c30:	f7fc fee2 	bl	80009f8 <__aeabi_dcmpgt>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d051      	beq.n	8003cdc <_dtoa_r+0x22c>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c42:	1b5d      	subs	r5, r3, r5
 8003c44:	1e6b      	subs	r3, r5, #1
 8003c46:	9307      	str	r3, [sp, #28]
 8003c48:	bf43      	ittte	mi
 8003c4a:	2300      	movmi	r3, #0
 8003c4c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003c50:	9307      	strmi	r3, [sp, #28]
 8003c52:	f04f 0900 	movpl.w	r9, #0
 8003c56:	f1ba 0f00 	cmp.w	sl, #0
 8003c5a:	db41      	blt.n	8003ce0 <_dtoa_r+0x230>
 8003c5c:	9b07      	ldr	r3, [sp, #28]
 8003c5e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003c62:	4453      	add	r3, sl
 8003c64:	9307      	str	r3, [sp, #28]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9308      	str	r3, [sp, #32]
 8003c6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	f200 808f 	bhi.w	8003d90 <_dtoa_r+0x2e0>
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	bfc4      	itt	gt
 8003c76:	3b04      	subgt	r3, #4
 8003c78:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003c7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c7c:	bfc8      	it	gt
 8003c7e:	2500      	movgt	r5, #0
 8003c80:	f1a3 0302 	sub.w	r3, r3, #2
 8003c84:	bfd8      	it	le
 8003c86:	2501      	movle	r5, #1
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	f200 808d 	bhi.w	8003da8 <_dtoa_r+0x2f8>
 8003c8e:	e8df f003 	tbb	[pc, r3]
 8003c92:	7d7b      	.short	0x7d7b
 8003c94:	6f2f      	.short	0x6f2f
 8003c96:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003c9a:	441d      	add	r5, r3
 8003c9c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003ca0:	2820      	cmp	r0, #32
 8003ca2:	dd13      	ble.n	8003ccc <_dtoa_r+0x21c>
 8003ca4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003ca8:	9b02      	ldr	r3, [sp, #8]
 8003caa:	fa08 f800 	lsl.w	r8, r8, r0
 8003cae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003cb2:	fa23 f000 	lsr.w	r0, r3, r0
 8003cb6:	ea48 0000 	orr.w	r0, r8, r0
 8003cba:	f7fc fb93 	bl	80003e4 <__aeabi_ui2d>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4680      	mov	r8, r0
 8003cc2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003cc6:	3d01      	subs	r5, #1
 8003cc8:	9310      	str	r3, [sp, #64]	; 0x40
 8003cca:	e771      	b.n	8003bb0 <_dtoa_r+0x100>
 8003ccc:	9b02      	ldr	r3, [sp, #8]
 8003cce:	f1c0 0020 	rsb	r0, r0, #32
 8003cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cd6:	e7f0      	b.n	8003cba <_dtoa_r+0x20a>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e7b0      	b.n	8003c3e <_dtoa_r+0x18e>
 8003cdc:	900d      	str	r0, [sp, #52]	; 0x34
 8003cde:	e7af      	b.n	8003c40 <_dtoa_r+0x190>
 8003ce0:	f1ca 0300 	rsb	r3, sl, #0
 8003ce4:	9308      	str	r3, [sp, #32]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	eba9 090a 	sub.w	r9, r9, sl
 8003cec:	930c      	str	r3, [sp, #48]	; 0x30
 8003cee:	e7bc      	b.n	8003c6a <_dtoa_r+0x1ba>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	dd74      	ble.n	8003de4 <_dtoa_r+0x334>
 8003cfa:	4698      	mov	r8, r3
 8003cfc:	9304      	str	r3, [sp, #16]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003d02:	6072      	str	r2, [r6, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	f102 0014 	add.w	r0, r2, #20
 8003d0a:	4298      	cmp	r0, r3
 8003d0c:	6871      	ldr	r1, [r6, #4]
 8003d0e:	d96e      	bls.n	8003dee <_dtoa_r+0x33e>
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 fd6c 	bl	80047ee <_Balloc>
 8003d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d18:	6030      	str	r0, [r6, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b8 0f0e 	cmp.w	r8, #14
 8003d20:	9306      	str	r3, [sp, #24]
 8003d22:	f200 80ed 	bhi.w	8003f00 <_dtoa_r+0x450>
 8003d26:	2d00      	cmp	r5, #0
 8003d28:	f000 80ea 	beq.w	8003f00 <_dtoa_r+0x450>
 8003d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d30:	f1ba 0f00 	cmp.w	sl, #0
 8003d34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003d38:	dd77      	ble.n	8003e2a <_dtoa_r+0x37a>
 8003d3a:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <_dtoa_r+0x32c>)
 8003d3c:	f00a 030f 	and.w	r3, sl, #15
 8003d40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003d44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d48:	06f0      	lsls	r0, r6, #27
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003d52:	d568      	bpl.n	8003e26 <_dtoa_r+0x376>
 8003d54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <_dtoa_r+0x330>)
 8003d5a:	2503      	movs	r5, #3
 8003d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d60:	f7fc fce4 	bl	800072c <__aeabi_ddiv>
 8003d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d68:	f006 060f 	and.w	r6, r6, #15
 8003d6c:	4f1c      	ldr	r7, [pc, #112]	; (8003de0 <_dtoa_r+0x330>)
 8003d6e:	e04f      	b.n	8003e10 <_dtoa_r+0x360>
 8003d70:	2301      	movs	r3, #1
 8003d72:	9309      	str	r3, [sp, #36]	; 0x24
 8003d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d76:	4453      	add	r3, sl
 8003d78:	f103 0801 	add.w	r8, r3, #1
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	4643      	mov	r3, r8
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bfb8      	it	lt
 8003d84:	2301      	movlt	r3, #1
 8003d86:	e7ba      	b.n	8003cfe <_dtoa_r+0x24e>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e7b2      	b.n	8003cf2 <_dtoa_r+0x242>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e7f0      	b.n	8003d72 <_dtoa_r+0x2c2>
 8003d90:	2501      	movs	r5, #1
 8003d92:	2300      	movs	r3, #0
 8003d94:	9509      	str	r5, [sp, #36]	; 0x24
 8003d96:	931e      	str	r3, [sp, #120]	; 0x78
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	9304      	str	r3, [sp, #16]
 8003da0:	4698      	mov	r8, r3
 8003da2:	2312      	movs	r3, #18
 8003da4:	921f      	str	r2, [sp, #124]	; 0x7c
 8003da6:	e7aa      	b.n	8003cfe <_dtoa_r+0x24e>
 8003da8:	2301      	movs	r3, #1
 8003daa:	9309      	str	r3, [sp, #36]	; 0x24
 8003dac:	e7f4      	b.n	8003d98 <_dtoa_r+0x2e8>
 8003dae:	bf00      	nop
 8003db0:	636f4361 	.word	0x636f4361
 8003db4:	3fd287a7 	.word	0x3fd287a7
 8003db8:	8b60c8b3 	.word	0x8b60c8b3
 8003dbc:	3fc68a28 	.word	0x3fc68a28
 8003dc0:	509f79fb 	.word	0x509f79fb
 8003dc4:	3fd34413 	.word	0x3fd34413
 8003dc8:	7ff00000 	.word	0x7ff00000
 8003dcc:	08005543 	.word	0x08005543
 8003dd0:	0800553a 	.word	0x0800553a
 8003dd4:	08005539 	.word	0x08005539
 8003dd8:	3ff80000 	.word	0x3ff80000
 8003ddc:	080055d0 	.word	0x080055d0
 8003de0:	080055a8 	.word	0x080055a8
 8003de4:	2301      	movs	r3, #1
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	4698      	mov	r8, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	e7da      	b.n	8003da4 <_dtoa_r+0x2f4>
 8003dee:	3101      	adds	r1, #1
 8003df0:	6071      	str	r1, [r6, #4]
 8003df2:	0052      	lsls	r2, r2, #1
 8003df4:	e787      	b.n	8003d06 <_dtoa_r+0x256>
 8003df6:	07f1      	lsls	r1, r6, #31
 8003df8:	d508      	bpl.n	8003e0c <_dtoa_r+0x35c>
 8003dfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e02:	f7fc fb69 	bl	80004d8 <__aeabi_dmul>
 8003e06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e0a:	3501      	adds	r5, #1
 8003e0c:	1076      	asrs	r6, r6, #1
 8003e0e:	3708      	adds	r7, #8
 8003e10:	2e00      	cmp	r6, #0
 8003e12:	d1f0      	bne.n	8003df6 <_dtoa_r+0x346>
 8003e14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e1c:	f7fc fc86 	bl	800072c <__aeabi_ddiv>
 8003e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e24:	e01b      	b.n	8003e5e <_dtoa_r+0x3ae>
 8003e26:	2502      	movs	r5, #2
 8003e28:	e7a0      	b.n	8003d6c <_dtoa_r+0x2bc>
 8003e2a:	f000 80a4 	beq.w	8003f76 <_dtoa_r+0x4c6>
 8003e2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e32:	f1ca 0600 	rsb	r6, sl, #0
 8003e36:	4ba0      	ldr	r3, [pc, #640]	; (80040b8 <_dtoa_r+0x608>)
 8003e38:	f006 020f 	and.w	r2, r6, #15
 8003e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fb48 	bl	80004d8 <__aeabi_dmul>
 8003e48:	2502      	movs	r5, #2
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e50:	4f9a      	ldr	r7, [pc, #616]	; (80040bc <_dtoa_r+0x60c>)
 8003e52:	1136      	asrs	r6, r6, #4
 8003e54:	2e00      	cmp	r6, #0
 8003e56:	f040 8083 	bne.w	8003f60 <_dtoa_r+0x4b0>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e0      	bne.n	8003e20 <_dtoa_r+0x370>
 8003e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808a 	beq.w	8003f7a <_dtoa_r+0x4ca>
 8003e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e6a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003e6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e72:	2200      	movs	r2, #0
 8003e74:	4b92      	ldr	r3, [pc, #584]	; (80040c0 <_dtoa_r+0x610>)
 8003e76:	f7fc fda1 	bl	80009bc <__aeabi_dcmplt>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d07d      	beq.n	8003f7a <_dtoa_r+0x4ca>
 8003e7e:	f1b8 0f00 	cmp.w	r8, #0
 8003e82:	d07a      	beq.n	8003f7a <_dtoa_r+0x4ca>
 8003e84:	9b04      	ldr	r3, [sp, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dd36      	ble.n	8003ef8 <_dtoa_r+0x448>
 8003e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4b8c      	ldr	r3, [pc, #560]	; (80040c4 <_dtoa_r+0x614>)
 8003e92:	f7fc fb21 	bl	80004d8 <__aeabi_dmul>
 8003e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e9a:	9e04      	ldr	r6, [sp, #16]
 8003e9c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003ea0:	3501      	adds	r5, #1
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f7fc faae 	bl	8000404 <__aeabi_i2d>
 8003ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eac:	f7fc fb14 	bl	80004d8 <__aeabi_dmul>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <_dtoa_r+0x618>)
 8003eb4:	f7fc f95a 	bl	800016c <__adddf3>
 8003eb8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003ebc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ec0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	d15c      	bne.n	8003f80 <_dtoa_r+0x4d0>
 8003ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <_dtoa_r+0x61c>)
 8003ece:	f7fc f94b 	bl	8000168 <__aeabi_dsub>
 8003ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eda:	f7fc fd8d 	bl	80009f8 <__aeabi_dcmpgt>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f040 8281 	bne.w	80043e6 <_dtoa_r+0x936>
 8003ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003eee:	f7fc fd65 	bl	80009bc <__aeabi_dcmplt>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	f040 8275 	bne.w	80043e2 <_dtoa_r+0x932>
 8003ef8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f2c0 814b 	blt.w	800419e <_dtoa_r+0x6ee>
 8003f08:	f1ba 0f0e 	cmp.w	sl, #14
 8003f0c:	f300 8147 	bgt.w	800419e <_dtoa_r+0x6ee>
 8003f10:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <_dtoa_r+0x608>)
 8003f12:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f280 80d7 	bge.w	80040d4 <_dtoa_r+0x624>
 8003f26:	f1b8 0f00 	cmp.w	r8, #0
 8003f2a:	f300 80d3 	bgt.w	80040d4 <_dtoa_r+0x624>
 8003f2e:	f040 8257 	bne.w	80043e0 <_dtoa_r+0x930>
 8003f32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f36:	2200      	movs	r2, #0
 8003f38:	4b64      	ldr	r3, [pc, #400]	; (80040cc <_dtoa_r+0x61c>)
 8003f3a:	f7fc facd 	bl	80004d8 <__aeabi_dmul>
 8003f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f42:	f7fc fd4f 	bl	80009e4 <__aeabi_dcmpge>
 8003f46:	4646      	mov	r6, r8
 8003f48:	4647      	mov	r7, r8
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	f040 822d 	bne.w	80043aa <_dtoa_r+0x8fa>
 8003f50:	9b06      	ldr	r3, [sp, #24]
 8003f52:	9a06      	ldr	r2, [sp, #24]
 8003f54:	1c5d      	adds	r5, r3, #1
 8003f56:	2331      	movs	r3, #49	; 0x31
 8003f58:	f10a 0a01 	add.w	sl, sl, #1
 8003f5c:	7013      	strb	r3, [r2, #0]
 8003f5e:	e228      	b.n	80043b2 <_dtoa_r+0x902>
 8003f60:	07f2      	lsls	r2, r6, #31
 8003f62:	d505      	bpl.n	8003f70 <_dtoa_r+0x4c0>
 8003f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f68:	f7fc fab6 	bl	80004d8 <__aeabi_dmul>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	3501      	adds	r5, #1
 8003f70:	1076      	asrs	r6, r6, #1
 8003f72:	3708      	adds	r7, #8
 8003f74:	e76e      	b.n	8003e54 <_dtoa_r+0x3a4>
 8003f76:	2502      	movs	r5, #2
 8003f78:	e771      	b.n	8003e5e <_dtoa_r+0x3ae>
 8003f7a:	4657      	mov	r7, sl
 8003f7c:	4646      	mov	r6, r8
 8003f7e:	e790      	b.n	8003ea2 <_dtoa_r+0x3f2>
 8003f80:	4b4d      	ldr	r3, [pc, #308]	; (80040b8 <_dtoa_r+0x608>)
 8003f82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f86:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d048      	beq.n	8004022 <_dtoa_r+0x572>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	2000      	movs	r0, #0
 8003f96:	494e      	ldr	r1, [pc, #312]	; (80040d0 <_dtoa_r+0x620>)
 8003f98:	f7fc fbc8 	bl	800072c <__aeabi_ddiv>
 8003f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fa0:	f7fc f8e2 	bl	8000168 <__aeabi_dsub>
 8003fa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003fa8:	9d06      	ldr	r5, [sp, #24]
 8003faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fae:	f7fc fd43 	bl	8000a38 <__aeabi_d2iz>
 8003fb2:	9011      	str	r0, [sp, #68]	; 0x44
 8003fb4:	f7fc fa26 	bl	8000404 <__aeabi_i2d>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc0:	f7fc f8d2 	bl	8000168 <__aeabi_dsub>
 8003fc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fca:	3330      	adds	r3, #48	; 0x30
 8003fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8003fd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fd4:	f7fc fcf2 	bl	80009bc <__aeabi_dcmplt>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d163      	bne.n	80040a4 <_dtoa_r+0x5f4>
 8003fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	4937      	ldr	r1, [pc, #220]	; (80040c0 <_dtoa_r+0x610>)
 8003fe4:	f7fc f8c0 	bl	8000168 <__aeabi_dsub>
 8003fe8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fec:	f7fc fce6 	bl	80009bc <__aeabi_dcmplt>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	f040 80b5 	bne.w	8004160 <_dtoa_r+0x6b0>
 8003ff6:	9b06      	ldr	r3, [sp, #24]
 8003ff8:	1aeb      	subs	r3, r5, r3
 8003ffa:	429e      	cmp	r6, r3
 8003ffc:	f77f af7c 	ble.w	8003ef8 <_dtoa_r+0x448>
 8004000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004004:	2200      	movs	r2, #0
 8004006:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <_dtoa_r+0x614>)
 8004008:	f7fc fa66 	bl	80004d8 <__aeabi_dmul>
 800400c:	2200      	movs	r2, #0
 800400e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004016:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <_dtoa_r+0x614>)
 8004018:	f7fc fa5e 	bl	80004d8 <__aeabi_dmul>
 800401c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004020:	e7c3      	b.n	8003faa <_dtoa_r+0x4fa>
 8004022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004026:	f7fc fa57 	bl	80004d8 <__aeabi_dmul>
 800402a:	9b06      	ldr	r3, [sp, #24]
 800402c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004030:	199d      	adds	r5, r3, r6
 8004032:	461e      	mov	r6, r3
 8004034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004038:	f7fc fcfe 	bl	8000a38 <__aeabi_d2iz>
 800403c:	9011      	str	r0, [sp, #68]	; 0x44
 800403e:	f7fc f9e1 	bl	8000404 <__aeabi_i2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800404a:	f7fc f88d 	bl	8000168 <__aeabi_dsub>
 800404e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004054:	3330      	adds	r3, #48	; 0x30
 8004056:	f806 3b01 	strb.w	r3, [r6], #1
 800405a:	42ae      	cmp	r6, r5
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	d124      	bne.n	80040ac <_dtoa_r+0x5fc>
 8004062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <_dtoa_r+0x620>)
 8004068:	f7fc f880 	bl	800016c <__adddf3>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004074:	f7fc fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 8004078:	2800      	cmp	r0, #0
 800407a:	d171      	bne.n	8004160 <_dtoa_r+0x6b0>
 800407c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004080:	2000      	movs	r0, #0
 8004082:	4913      	ldr	r1, [pc, #76]	; (80040d0 <_dtoa_r+0x620>)
 8004084:	f7fc f870 	bl	8000168 <__aeabi_dsub>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004090:	f7fc fc94 	bl	80009bc <__aeabi_dcmplt>
 8004094:	2800      	cmp	r0, #0
 8004096:	f43f af2f 	beq.w	8003ef8 <_dtoa_r+0x448>
 800409a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800409e:	1e6a      	subs	r2, r5, #1
 80040a0:	2b30      	cmp	r3, #48	; 0x30
 80040a2:	d001      	beq.n	80040a8 <_dtoa_r+0x5f8>
 80040a4:	46ba      	mov	sl, r7
 80040a6:	e04a      	b.n	800413e <_dtoa_r+0x68e>
 80040a8:	4615      	mov	r5, r2
 80040aa:	e7f6      	b.n	800409a <_dtoa_r+0x5ea>
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <_dtoa_r+0x614>)
 80040ae:	f7fc fa13 	bl	80004d8 <__aeabi_dmul>
 80040b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040b6:	e7bd      	b.n	8004034 <_dtoa_r+0x584>
 80040b8:	080055d0 	.word	0x080055d0
 80040bc:	080055a8 	.word	0x080055a8
 80040c0:	3ff00000 	.word	0x3ff00000
 80040c4:	40240000 	.word	0x40240000
 80040c8:	401c0000 	.word	0x401c0000
 80040cc:	40140000 	.word	0x40140000
 80040d0:	3fe00000 	.word	0x3fe00000
 80040d4:	9d06      	ldr	r5, [sp, #24]
 80040d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040de:	4630      	mov	r0, r6
 80040e0:	4639      	mov	r1, r7
 80040e2:	f7fc fb23 	bl	800072c <__aeabi_ddiv>
 80040e6:	f7fc fca7 	bl	8000a38 <__aeabi_d2iz>
 80040ea:	4681      	mov	r9, r0
 80040ec:	f7fc f98a 	bl	8000404 <__aeabi_i2d>
 80040f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f4:	f7fc f9f0 	bl	80004d8 <__aeabi_dmul>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4630      	mov	r0, r6
 80040fe:	4639      	mov	r1, r7
 8004100:	f7fc f832 	bl	8000168 <__aeabi_dsub>
 8004104:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004108:	f805 6b01 	strb.w	r6, [r5], #1
 800410c:	9e06      	ldr	r6, [sp, #24]
 800410e:	4602      	mov	r2, r0
 8004110:	1bae      	subs	r6, r5, r6
 8004112:	45b0      	cmp	r8, r6
 8004114:	460b      	mov	r3, r1
 8004116:	d135      	bne.n	8004184 <_dtoa_r+0x6d4>
 8004118:	f7fc f828 	bl	800016c <__adddf3>
 800411c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004120:	4606      	mov	r6, r0
 8004122:	460f      	mov	r7, r1
 8004124:	f7fc fc68 	bl	80009f8 <__aeabi_dcmpgt>
 8004128:	b9c8      	cbnz	r0, 800415e <_dtoa_r+0x6ae>
 800412a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800412e:	4630      	mov	r0, r6
 8004130:	4639      	mov	r1, r7
 8004132:	f7fc fc39 	bl	80009a8 <__aeabi_dcmpeq>
 8004136:	b110      	cbz	r0, 800413e <_dtoa_r+0x68e>
 8004138:	f019 0f01 	tst.w	r9, #1
 800413c:	d10f      	bne.n	800415e <_dtoa_r+0x6ae>
 800413e:	4659      	mov	r1, fp
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fb88 	bl	8004856 <_Bfree>
 8004146:	2300      	movs	r3, #0
 8004148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800414a:	702b      	strb	r3, [r5, #0]
 800414c:	f10a 0301 	add.w	r3, sl, #1
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004154:	2b00      	cmp	r3, #0
 8004156:	f43f acf3 	beq.w	8003b40 <_dtoa_r+0x90>
 800415a:	601d      	str	r5, [r3, #0]
 800415c:	e4f0      	b.n	8003b40 <_dtoa_r+0x90>
 800415e:	4657      	mov	r7, sl
 8004160:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004164:	1e6b      	subs	r3, r5, #1
 8004166:	2a39      	cmp	r2, #57	; 0x39
 8004168:	d106      	bne.n	8004178 <_dtoa_r+0x6c8>
 800416a:	9a06      	ldr	r2, [sp, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d107      	bne.n	8004180 <_dtoa_r+0x6d0>
 8004170:	2330      	movs	r3, #48	; 0x30
 8004172:	7013      	strb	r3, [r2, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	3701      	adds	r7, #1
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	3201      	adds	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e791      	b.n	80040a4 <_dtoa_r+0x5f4>
 8004180:	461d      	mov	r5, r3
 8004182:	e7ed      	b.n	8004160 <_dtoa_r+0x6b0>
 8004184:	2200      	movs	r2, #0
 8004186:	4b99      	ldr	r3, [pc, #612]	; (80043ec <_dtoa_r+0x93c>)
 8004188:	f7fc f9a6 	bl	80004d8 <__aeabi_dmul>
 800418c:	2200      	movs	r2, #0
 800418e:	2300      	movs	r3, #0
 8004190:	4606      	mov	r6, r0
 8004192:	460f      	mov	r7, r1
 8004194:	f7fc fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8004198:	2800      	cmp	r0, #0
 800419a:	d09e      	beq.n	80040da <_dtoa_r+0x62a>
 800419c:	e7cf      	b.n	800413e <_dtoa_r+0x68e>
 800419e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	f000 8088 	beq.w	80042b6 <_dtoa_r+0x806>
 80041a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041a8:	2a01      	cmp	r2, #1
 80041aa:	dc6d      	bgt.n	8004288 <_dtoa_r+0x7d8>
 80041ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	d066      	beq.n	8004280 <_dtoa_r+0x7d0>
 80041b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041b6:	464d      	mov	r5, r9
 80041b8:	9e08      	ldr	r6, [sp, #32]
 80041ba:	9a07      	ldr	r2, [sp, #28]
 80041bc:	2101      	movs	r1, #1
 80041be:	441a      	add	r2, r3
 80041c0:	4620      	mov	r0, r4
 80041c2:	4499      	add	r9, r3
 80041c4:	9207      	str	r2, [sp, #28]
 80041c6:	f000 fbe6 	bl	8004996 <__i2b>
 80041ca:	4607      	mov	r7, r0
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	dd0b      	ble.n	80041e8 <_dtoa_r+0x738>
 80041d0:	9b07      	ldr	r3, [sp, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dd08      	ble.n	80041e8 <_dtoa_r+0x738>
 80041d6:	42ab      	cmp	r3, r5
 80041d8:	bfa8      	it	ge
 80041da:	462b      	movge	r3, r5
 80041dc:	9a07      	ldr	r2, [sp, #28]
 80041de:	eba9 0903 	sub.w	r9, r9, r3
 80041e2:	1aed      	subs	r5, r5, r3
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	9307      	str	r3, [sp, #28]
 80041e8:	9b08      	ldr	r3, [sp, #32]
 80041ea:	b1eb      	cbz	r3, 8004228 <_dtoa_r+0x778>
 80041ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d065      	beq.n	80042be <_dtoa_r+0x80e>
 80041f2:	b18e      	cbz	r6, 8004218 <_dtoa_r+0x768>
 80041f4:	4639      	mov	r1, r7
 80041f6:	4632      	mov	r2, r6
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 fc6b 	bl	8004ad4 <__pow5mult>
 80041fe:	465a      	mov	r2, fp
 8004200:	4601      	mov	r1, r0
 8004202:	4607      	mov	r7, r0
 8004204:	4620      	mov	r0, r4
 8004206:	f000 fbcf 	bl	80049a8 <__multiply>
 800420a:	4659      	mov	r1, fp
 800420c:	900a      	str	r0, [sp, #40]	; 0x28
 800420e:	4620      	mov	r0, r4
 8004210:	f000 fb21 	bl	8004856 <_Bfree>
 8004214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004216:	469b      	mov	fp, r3
 8004218:	9b08      	ldr	r3, [sp, #32]
 800421a:	1b9a      	subs	r2, r3, r6
 800421c:	d004      	beq.n	8004228 <_dtoa_r+0x778>
 800421e:	4659      	mov	r1, fp
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fc57 	bl	8004ad4 <__pow5mult>
 8004226:	4683      	mov	fp, r0
 8004228:	2101      	movs	r1, #1
 800422a:	4620      	mov	r0, r4
 800422c:	f000 fbb3 	bl	8004996 <__i2b>
 8004230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004232:	4606      	mov	r6, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 81c6 	beq.w	80045c6 <_dtoa_r+0xb16>
 800423a:	461a      	mov	r2, r3
 800423c:	4601      	mov	r1, r0
 800423e:	4620      	mov	r0, r4
 8004240:	f000 fc48 	bl	8004ad4 <__pow5mult>
 8004244:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004246:	4606      	mov	r6, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	dc3e      	bgt.n	80042ca <_dtoa_r+0x81a>
 800424c:	9b02      	ldr	r3, [sp, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d137      	bne.n	80042c2 <_dtoa_r+0x812>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004258:	2b00      	cmp	r3, #0
 800425a:	d134      	bne.n	80042c6 <_dtoa_r+0x816>
 800425c:	9b03      	ldr	r3, [sp, #12]
 800425e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004262:	0d1b      	lsrs	r3, r3, #20
 8004264:	051b      	lsls	r3, r3, #20
 8004266:	b12b      	cbz	r3, 8004274 <_dtoa_r+0x7c4>
 8004268:	9b07      	ldr	r3, [sp, #28]
 800426a:	f109 0901 	add.w	r9, r9, #1
 800426e:	3301      	adds	r3, #1
 8004270:	9307      	str	r3, [sp, #28]
 8004272:	2301      	movs	r3, #1
 8004274:	9308      	str	r3, [sp, #32]
 8004276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004278:	2b00      	cmp	r3, #0
 800427a:	d128      	bne.n	80042ce <_dtoa_r+0x81e>
 800427c:	2001      	movs	r0, #1
 800427e:	e02e      	b.n	80042de <_dtoa_r+0x82e>
 8004280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004282:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004286:	e796      	b.n	80041b6 <_dtoa_r+0x706>
 8004288:	9b08      	ldr	r3, [sp, #32]
 800428a:	f108 36ff 	add.w	r6, r8, #4294967295
 800428e:	42b3      	cmp	r3, r6
 8004290:	bfb7      	itett	lt
 8004292:	9b08      	ldrlt	r3, [sp, #32]
 8004294:	1b9e      	subge	r6, r3, r6
 8004296:	1af2      	sublt	r2, r6, r3
 8004298:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800429a:	bfbf      	itttt	lt
 800429c:	9608      	strlt	r6, [sp, #32]
 800429e:	189b      	addlt	r3, r3, r2
 80042a0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80042a2:	2600      	movlt	r6, #0
 80042a4:	f1b8 0f00 	cmp.w	r8, #0
 80042a8:	bfb9      	ittee	lt
 80042aa:	eba9 0508 	sublt.w	r5, r9, r8
 80042ae:	2300      	movlt	r3, #0
 80042b0:	464d      	movge	r5, r9
 80042b2:	4643      	movge	r3, r8
 80042b4:	e781      	b.n	80041ba <_dtoa_r+0x70a>
 80042b6:	9e08      	ldr	r6, [sp, #32]
 80042b8:	464d      	mov	r5, r9
 80042ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80042bc:	e786      	b.n	80041cc <_dtoa_r+0x71c>
 80042be:	9a08      	ldr	r2, [sp, #32]
 80042c0:	e7ad      	b.n	800421e <_dtoa_r+0x76e>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e7d6      	b.n	8004274 <_dtoa_r+0x7c4>
 80042c6:	9b02      	ldr	r3, [sp, #8]
 80042c8:	e7d4      	b.n	8004274 <_dtoa_r+0x7c4>
 80042ca:	2300      	movs	r3, #0
 80042cc:	9308      	str	r3, [sp, #32]
 80042ce:	6933      	ldr	r3, [r6, #16]
 80042d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80042d4:	6918      	ldr	r0, [r3, #16]
 80042d6:	f000 fb10 	bl	80048fa <__hi0bits>
 80042da:	f1c0 0020 	rsb	r0, r0, #32
 80042de:	9b07      	ldr	r3, [sp, #28]
 80042e0:	4418      	add	r0, r3
 80042e2:	f010 001f 	ands.w	r0, r0, #31
 80042e6:	d047      	beq.n	8004378 <_dtoa_r+0x8c8>
 80042e8:	f1c0 0320 	rsb	r3, r0, #32
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	dd3b      	ble.n	8004368 <_dtoa_r+0x8b8>
 80042f0:	9b07      	ldr	r3, [sp, #28]
 80042f2:	f1c0 001c 	rsb	r0, r0, #28
 80042f6:	4481      	add	r9, r0
 80042f8:	4405      	add	r5, r0
 80042fa:	4403      	add	r3, r0
 80042fc:	9307      	str	r3, [sp, #28]
 80042fe:	f1b9 0f00 	cmp.w	r9, #0
 8004302:	dd05      	ble.n	8004310 <_dtoa_r+0x860>
 8004304:	4659      	mov	r1, fp
 8004306:	464a      	mov	r2, r9
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fc31 	bl	8004b70 <__lshift>
 800430e:	4683      	mov	fp, r0
 8004310:	9b07      	ldr	r3, [sp, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	dd05      	ble.n	8004322 <_dtoa_r+0x872>
 8004316:	4631      	mov	r1, r6
 8004318:	461a      	mov	r2, r3
 800431a:	4620      	mov	r0, r4
 800431c:	f000 fc28 	bl	8004b70 <__lshift>
 8004320:	4606      	mov	r6, r0
 8004322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004324:	b353      	cbz	r3, 800437c <_dtoa_r+0x8cc>
 8004326:	4631      	mov	r1, r6
 8004328:	4658      	mov	r0, fp
 800432a:	f000 fc75 	bl	8004c18 <__mcmp>
 800432e:	2800      	cmp	r0, #0
 8004330:	da24      	bge.n	800437c <_dtoa_r+0x8cc>
 8004332:	2300      	movs	r3, #0
 8004334:	4659      	mov	r1, fp
 8004336:	220a      	movs	r2, #10
 8004338:	4620      	mov	r0, r4
 800433a:	f000 faa3 	bl	8004884 <__multadd>
 800433e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004340:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004344:	4683      	mov	fp, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8144 	beq.w	80045d4 <_dtoa_r+0xb24>
 800434c:	2300      	movs	r3, #0
 800434e:	4639      	mov	r1, r7
 8004350:	220a      	movs	r2, #10
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fa96 	bl	8004884 <__multadd>
 8004358:	9b04      	ldr	r3, [sp, #16]
 800435a:	4607      	mov	r7, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	dc4d      	bgt.n	80043fc <_dtoa_r+0x94c>
 8004360:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004362:	2b02      	cmp	r3, #2
 8004364:	dd4a      	ble.n	80043fc <_dtoa_r+0x94c>
 8004366:	e011      	b.n	800438c <_dtoa_r+0x8dc>
 8004368:	d0c9      	beq.n	80042fe <_dtoa_r+0x84e>
 800436a:	9a07      	ldr	r2, [sp, #28]
 800436c:	331c      	adds	r3, #28
 800436e:	441a      	add	r2, r3
 8004370:	4499      	add	r9, r3
 8004372:	441d      	add	r5, r3
 8004374:	4613      	mov	r3, r2
 8004376:	e7c1      	b.n	80042fc <_dtoa_r+0x84c>
 8004378:	4603      	mov	r3, r0
 800437a:	e7f6      	b.n	800436a <_dtoa_r+0x8ba>
 800437c:	f1b8 0f00 	cmp.w	r8, #0
 8004380:	dc36      	bgt.n	80043f0 <_dtoa_r+0x940>
 8004382:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004384:	2b02      	cmp	r3, #2
 8004386:	dd33      	ble.n	80043f0 <_dtoa_r+0x940>
 8004388:	f8cd 8010 	str.w	r8, [sp, #16]
 800438c:	9b04      	ldr	r3, [sp, #16]
 800438e:	b963      	cbnz	r3, 80043aa <_dtoa_r+0x8fa>
 8004390:	4631      	mov	r1, r6
 8004392:	2205      	movs	r2, #5
 8004394:	4620      	mov	r0, r4
 8004396:	f000 fa75 	bl	8004884 <__multadd>
 800439a:	4601      	mov	r1, r0
 800439c:	4606      	mov	r6, r0
 800439e:	4658      	mov	r0, fp
 80043a0:	f000 fc3a 	bl	8004c18 <__mcmp>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f73f add3 	bgt.w	8003f50 <_dtoa_r+0x4a0>
 80043aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043ac:	9d06      	ldr	r5, [sp, #24]
 80043ae:	ea6f 0a03 	mvn.w	sl, r3
 80043b2:	f04f 0900 	mov.w	r9, #0
 80043b6:	4631      	mov	r1, r6
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fa4c 	bl	8004856 <_Bfree>
 80043be:	2f00      	cmp	r7, #0
 80043c0:	f43f aebd 	beq.w	800413e <_dtoa_r+0x68e>
 80043c4:	f1b9 0f00 	cmp.w	r9, #0
 80043c8:	d005      	beq.n	80043d6 <_dtoa_r+0x926>
 80043ca:	45b9      	cmp	r9, r7
 80043cc:	d003      	beq.n	80043d6 <_dtoa_r+0x926>
 80043ce:	4649      	mov	r1, r9
 80043d0:	4620      	mov	r0, r4
 80043d2:	f000 fa40 	bl	8004856 <_Bfree>
 80043d6:	4639      	mov	r1, r7
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 fa3c 	bl	8004856 <_Bfree>
 80043de:	e6ae      	b.n	800413e <_dtoa_r+0x68e>
 80043e0:	2600      	movs	r6, #0
 80043e2:	4637      	mov	r7, r6
 80043e4:	e7e1      	b.n	80043aa <_dtoa_r+0x8fa>
 80043e6:	46ba      	mov	sl, r7
 80043e8:	4637      	mov	r7, r6
 80043ea:	e5b1      	b.n	8003f50 <_dtoa_r+0x4a0>
 80043ec:	40240000 	.word	0x40240000
 80043f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80f3 	beq.w	80045e2 <_dtoa_r+0xb32>
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	dd05      	ble.n	800440c <_dtoa_r+0x95c>
 8004400:	4639      	mov	r1, r7
 8004402:	462a      	mov	r2, r5
 8004404:	4620      	mov	r0, r4
 8004406:	f000 fbb3 	bl	8004b70 <__lshift>
 800440a:	4607      	mov	r7, r0
 800440c:	9b08      	ldr	r3, [sp, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04c      	beq.n	80044ac <_dtoa_r+0x9fc>
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4620      	mov	r0, r4
 8004416:	f000 f9ea 	bl	80047ee <_Balloc>
 800441a:	4605      	mov	r5, r0
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	f107 010c 	add.w	r1, r7, #12
 8004422:	3202      	adds	r2, #2
 8004424:	0092      	lsls	r2, r2, #2
 8004426:	300c      	adds	r0, #12
 8004428:	f000 f9d6 	bl	80047d8 <memcpy>
 800442c:	2201      	movs	r2, #1
 800442e:	4629      	mov	r1, r5
 8004430:	4620      	mov	r0, r4
 8004432:	f000 fb9d 	bl	8004b70 <__lshift>
 8004436:	46b9      	mov	r9, r7
 8004438:	4607      	mov	r7, r0
 800443a:	9b06      	ldr	r3, [sp, #24]
 800443c:	9307      	str	r3, [sp, #28]
 800443e:	9b02      	ldr	r3, [sp, #8]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	9308      	str	r3, [sp, #32]
 8004446:	4631      	mov	r1, r6
 8004448:	4658      	mov	r0, fp
 800444a:	f7ff faa3 	bl	8003994 <quorem>
 800444e:	4649      	mov	r1, r9
 8004450:	4605      	mov	r5, r0
 8004452:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004456:	4658      	mov	r0, fp
 8004458:	f000 fbde 	bl	8004c18 <__mcmp>
 800445c:	463a      	mov	r2, r7
 800445e:	9002      	str	r0, [sp, #8]
 8004460:	4631      	mov	r1, r6
 8004462:	4620      	mov	r0, r4
 8004464:	f000 fbf2 	bl	8004c4c <__mdiff>
 8004468:	68c3      	ldr	r3, [r0, #12]
 800446a:	4602      	mov	r2, r0
 800446c:	bb03      	cbnz	r3, 80044b0 <_dtoa_r+0xa00>
 800446e:	4601      	mov	r1, r0
 8004470:	9009      	str	r0, [sp, #36]	; 0x24
 8004472:	4658      	mov	r0, fp
 8004474:	f000 fbd0 	bl	8004c18 <__mcmp>
 8004478:	4603      	mov	r3, r0
 800447a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800447c:	4611      	mov	r1, r2
 800447e:	4620      	mov	r0, r4
 8004480:	9309      	str	r3, [sp, #36]	; 0x24
 8004482:	f000 f9e8 	bl	8004856 <_Bfree>
 8004486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004488:	b9a3      	cbnz	r3, 80044b4 <_dtoa_r+0xa04>
 800448a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800448c:	b992      	cbnz	r2, 80044b4 <_dtoa_r+0xa04>
 800448e:	9a08      	ldr	r2, [sp, #32]
 8004490:	b982      	cbnz	r2, 80044b4 <_dtoa_r+0xa04>
 8004492:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004496:	d029      	beq.n	80044ec <_dtoa_r+0xa3c>
 8004498:	9b02      	ldr	r3, [sp, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	dd01      	ble.n	80044a2 <_dtoa_r+0x9f2>
 800449e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80044a2:	9b07      	ldr	r3, [sp, #28]
 80044a4:	1c5d      	adds	r5, r3, #1
 80044a6:	f883 8000 	strb.w	r8, [r3]
 80044aa:	e784      	b.n	80043b6 <_dtoa_r+0x906>
 80044ac:	4638      	mov	r0, r7
 80044ae:	e7c2      	b.n	8004436 <_dtoa_r+0x986>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e7e3      	b.n	800447c <_dtoa_r+0x9cc>
 80044b4:	9a02      	ldr	r2, [sp, #8]
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	db04      	blt.n	80044c4 <_dtoa_r+0xa14>
 80044ba:	d123      	bne.n	8004504 <_dtoa_r+0xa54>
 80044bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80044be:	bb0a      	cbnz	r2, 8004504 <_dtoa_r+0xa54>
 80044c0:	9a08      	ldr	r2, [sp, #32]
 80044c2:	b9fa      	cbnz	r2, 8004504 <_dtoa_r+0xa54>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	ddec      	ble.n	80044a2 <_dtoa_r+0x9f2>
 80044c8:	4659      	mov	r1, fp
 80044ca:	2201      	movs	r2, #1
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fb4f 	bl	8004b70 <__lshift>
 80044d2:	4631      	mov	r1, r6
 80044d4:	4683      	mov	fp, r0
 80044d6:	f000 fb9f 	bl	8004c18 <__mcmp>
 80044da:	2800      	cmp	r0, #0
 80044dc:	dc03      	bgt.n	80044e6 <_dtoa_r+0xa36>
 80044de:	d1e0      	bne.n	80044a2 <_dtoa_r+0x9f2>
 80044e0:	f018 0f01 	tst.w	r8, #1
 80044e4:	d0dd      	beq.n	80044a2 <_dtoa_r+0x9f2>
 80044e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80044ea:	d1d8      	bne.n	800449e <_dtoa_r+0x9ee>
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	9a07      	ldr	r2, [sp, #28]
 80044f0:	1c5d      	adds	r5, r3, #1
 80044f2:	2339      	movs	r3, #57	; 0x39
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044fa:	1e6a      	subs	r2, r5, #1
 80044fc:	2b39      	cmp	r3, #57	; 0x39
 80044fe:	d04d      	beq.n	800459c <_dtoa_r+0xaec>
 8004500:	3301      	adds	r3, #1
 8004502:	e052      	b.n	80045aa <_dtoa_r+0xafa>
 8004504:	9a07      	ldr	r2, [sp, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f102 0501 	add.w	r5, r2, #1
 800450c:	dd06      	ble.n	800451c <_dtoa_r+0xa6c>
 800450e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004512:	d0eb      	beq.n	80044ec <_dtoa_r+0xa3c>
 8004514:	f108 0801 	add.w	r8, r8, #1
 8004518:	9b07      	ldr	r3, [sp, #28]
 800451a:	e7c4      	b.n	80044a6 <_dtoa_r+0x9f6>
 800451c:	9b06      	ldr	r3, [sp, #24]
 800451e:	9a04      	ldr	r2, [sp, #16]
 8004520:	1aeb      	subs	r3, r5, r3
 8004522:	4293      	cmp	r3, r2
 8004524:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004528:	d021      	beq.n	800456e <_dtoa_r+0xabe>
 800452a:	4659      	mov	r1, fp
 800452c:	2300      	movs	r3, #0
 800452e:	220a      	movs	r2, #10
 8004530:	4620      	mov	r0, r4
 8004532:	f000 f9a7 	bl	8004884 <__multadd>
 8004536:	45b9      	cmp	r9, r7
 8004538:	4683      	mov	fp, r0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	f04f 020a 	mov.w	r2, #10
 8004542:	4649      	mov	r1, r9
 8004544:	4620      	mov	r0, r4
 8004546:	d105      	bne.n	8004554 <_dtoa_r+0xaa4>
 8004548:	f000 f99c 	bl	8004884 <__multadd>
 800454c:	4681      	mov	r9, r0
 800454e:	4607      	mov	r7, r0
 8004550:	9507      	str	r5, [sp, #28]
 8004552:	e778      	b.n	8004446 <_dtoa_r+0x996>
 8004554:	f000 f996 	bl	8004884 <__multadd>
 8004558:	4639      	mov	r1, r7
 800455a:	4681      	mov	r9, r0
 800455c:	2300      	movs	r3, #0
 800455e:	220a      	movs	r2, #10
 8004560:	4620      	mov	r0, r4
 8004562:	f000 f98f 	bl	8004884 <__multadd>
 8004566:	4607      	mov	r7, r0
 8004568:	e7f2      	b.n	8004550 <_dtoa_r+0xaa0>
 800456a:	f04f 0900 	mov.w	r9, #0
 800456e:	4659      	mov	r1, fp
 8004570:	2201      	movs	r2, #1
 8004572:	4620      	mov	r0, r4
 8004574:	f000 fafc 	bl	8004b70 <__lshift>
 8004578:	4631      	mov	r1, r6
 800457a:	4683      	mov	fp, r0
 800457c:	f000 fb4c 	bl	8004c18 <__mcmp>
 8004580:	2800      	cmp	r0, #0
 8004582:	dcb8      	bgt.n	80044f6 <_dtoa_r+0xa46>
 8004584:	d102      	bne.n	800458c <_dtoa_r+0xadc>
 8004586:	f018 0f01 	tst.w	r8, #1
 800458a:	d1b4      	bne.n	80044f6 <_dtoa_r+0xa46>
 800458c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004590:	1e6a      	subs	r2, r5, #1
 8004592:	2b30      	cmp	r3, #48	; 0x30
 8004594:	f47f af0f 	bne.w	80043b6 <_dtoa_r+0x906>
 8004598:	4615      	mov	r5, r2
 800459a:	e7f7      	b.n	800458c <_dtoa_r+0xadc>
 800459c:	9b06      	ldr	r3, [sp, #24]
 800459e:	4293      	cmp	r3, r2
 80045a0:	d105      	bne.n	80045ae <_dtoa_r+0xafe>
 80045a2:	2331      	movs	r3, #49	; 0x31
 80045a4:	9a06      	ldr	r2, [sp, #24]
 80045a6:	f10a 0a01 	add.w	sl, sl, #1
 80045aa:	7013      	strb	r3, [r2, #0]
 80045ac:	e703      	b.n	80043b6 <_dtoa_r+0x906>
 80045ae:	4615      	mov	r5, r2
 80045b0:	e7a1      	b.n	80044f6 <_dtoa_r+0xa46>
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <_dtoa_r+0xb60>)
 80045b4:	f7ff bae1 	b.w	8003b7a <_dtoa_r+0xca>
 80045b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f47f aabb 	bne.w	8003b36 <_dtoa_r+0x86>
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <_dtoa_r+0xb64>)
 80045c2:	f7ff bada 	b.w	8003b7a <_dtoa_r+0xca>
 80045c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f77f ae3f 	ble.w	800424c <_dtoa_r+0x79c>
 80045ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045d0:	9308      	str	r3, [sp, #32]
 80045d2:	e653      	b.n	800427c <_dtoa_r+0x7cc>
 80045d4:	9b04      	ldr	r3, [sp, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc03      	bgt.n	80045e2 <_dtoa_r+0xb32>
 80045da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045dc:	2b02      	cmp	r3, #2
 80045de:	f73f aed5 	bgt.w	800438c <_dtoa_r+0x8dc>
 80045e2:	9d06      	ldr	r5, [sp, #24]
 80045e4:	4631      	mov	r1, r6
 80045e6:	4658      	mov	r0, fp
 80045e8:	f7ff f9d4 	bl	8003994 <quorem>
 80045ec:	9b06      	ldr	r3, [sp, #24]
 80045ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80045f2:	f805 8b01 	strb.w	r8, [r5], #1
 80045f6:	9a04      	ldr	r2, [sp, #16]
 80045f8:	1aeb      	subs	r3, r5, r3
 80045fa:	429a      	cmp	r2, r3
 80045fc:	ddb5      	ble.n	800456a <_dtoa_r+0xaba>
 80045fe:	4659      	mov	r1, fp
 8004600:	2300      	movs	r3, #0
 8004602:	220a      	movs	r2, #10
 8004604:	4620      	mov	r0, r4
 8004606:	f000 f93d 	bl	8004884 <__multadd>
 800460a:	4683      	mov	fp, r0
 800460c:	e7ea      	b.n	80045e4 <_dtoa_r+0xb34>
 800460e:	bf00      	nop
 8004610:	08005538 	.word	0x08005538
 8004614:	0800553a 	.word	0x0800553a

08004618 <std>:
 8004618:	2300      	movs	r3, #0
 800461a:	b510      	push	{r4, lr}
 800461c:	4604      	mov	r4, r0
 800461e:	e9c0 3300 	strd	r3, r3, [r0]
 8004622:	6083      	str	r3, [r0, #8]
 8004624:	8181      	strh	r1, [r0, #12]
 8004626:	6643      	str	r3, [r0, #100]	; 0x64
 8004628:	81c2      	strh	r2, [r0, #14]
 800462a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800462e:	6183      	str	r3, [r0, #24]
 8004630:	4619      	mov	r1, r3
 8004632:	2208      	movs	r2, #8
 8004634:	305c      	adds	r0, #92	; 0x5c
 8004636:	f7fe fe54 	bl	80032e2 <memset>
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <std+0x38>)
 800463c:	6224      	str	r4, [r4, #32]
 800463e:	6263      	str	r3, [r4, #36]	; 0x24
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <std+0x3c>)
 8004642:	62a3      	str	r3, [r4, #40]	; 0x28
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <std+0x40>)
 8004646:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <std+0x44>)
 800464a:	6323      	str	r3, [r4, #48]	; 0x30
 800464c:	bd10      	pop	{r4, pc}
 800464e:	bf00      	nop
 8004650:	08004f9d 	.word	0x08004f9d
 8004654:	08004fbf 	.word	0x08004fbf
 8004658:	08004ff7 	.word	0x08004ff7
 800465c:	0800501b 	.word	0x0800501b

08004660 <_cleanup_r>:
 8004660:	4901      	ldr	r1, [pc, #4]	; (8004668 <_cleanup_r+0x8>)
 8004662:	f000 b885 	b.w	8004770 <_fwalk_reent>
 8004666:	bf00      	nop
 8004668:	080052f5 	.word	0x080052f5

0800466c <__sfmoreglue>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	2568      	movs	r5, #104	; 0x68
 8004670:	1e4a      	subs	r2, r1, #1
 8004672:	4355      	muls	r5, r2
 8004674:	460e      	mov	r6, r1
 8004676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800467a:	f000 fbef 	bl	8004e5c <_malloc_r>
 800467e:	4604      	mov	r4, r0
 8004680:	b140      	cbz	r0, 8004694 <__sfmoreglue+0x28>
 8004682:	2100      	movs	r1, #0
 8004684:	e9c0 1600 	strd	r1, r6, [r0]
 8004688:	300c      	adds	r0, #12
 800468a:	60a0      	str	r0, [r4, #8]
 800468c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004690:	f7fe fe27 	bl	80032e2 <memset>
 8004694:	4620      	mov	r0, r4
 8004696:	bd70      	pop	{r4, r5, r6, pc}

08004698 <__sinit>:
 8004698:	6983      	ldr	r3, [r0, #24]
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	bb33      	cbnz	r3, 80046ee <__sinit+0x56>
 80046a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80046a4:	6503      	str	r3, [r0, #80]	; 0x50
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <__sinit+0x58>)
 80046a8:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <__sinit+0x5c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6282      	str	r2, [r0, #40]	; 0x28
 80046ae:	4298      	cmp	r0, r3
 80046b0:	bf04      	itt	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	6183      	streq	r3, [r0, #24]
 80046b6:	f000 f81f 	bl	80046f8 <__sfp>
 80046ba:	6060      	str	r0, [r4, #4]
 80046bc:	4620      	mov	r0, r4
 80046be:	f000 f81b 	bl	80046f8 <__sfp>
 80046c2:	60a0      	str	r0, [r4, #8]
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 f817 	bl	80046f8 <__sfp>
 80046ca:	2200      	movs	r2, #0
 80046cc:	60e0      	str	r0, [r4, #12]
 80046ce:	2104      	movs	r1, #4
 80046d0:	6860      	ldr	r0, [r4, #4]
 80046d2:	f7ff ffa1 	bl	8004618 <std>
 80046d6:	2201      	movs	r2, #1
 80046d8:	2109      	movs	r1, #9
 80046da:	68a0      	ldr	r0, [r4, #8]
 80046dc:	f7ff ff9c 	bl	8004618 <std>
 80046e0:	2202      	movs	r2, #2
 80046e2:	2112      	movs	r1, #18
 80046e4:	68e0      	ldr	r0, [r4, #12]
 80046e6:	f7ff ff97 	bl	8004618 <std>
 80046ea:	2301      	movs	r3, #1
 80046ec:	61a3      	str	r3, [r4, #24]
 80046ee:	bd10      	pop	{r4, pc}
 80046f0:	08005524 	.word	0x08005524
 80046f4:	08004661 	.word	0x08004661

080046f8 <__sfp>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <__sfp+0x70>)
 80046fc:	4607      	mov	r7, r0
 80046fe:	681e      	ldr	r6, [r3, #0]
 8004700:	69b3      	ldr	r3, [r6, #24]
 8004702:	b913      	cbnz	r3, 800470a <__sfp+0x12>
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffc7 	bl	8004698 <__sinit>
 800470a:	3648      	adds	r6, #72	; 0x48
 800470c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004710:	3b01      	subs	r3, #1
 8004712:	d503      	bpl.n	800471c <__sfp+0x24>
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	b133      	cbz	r3, 8004726 <__sfp+0x2e>
 8004718:	6836      	ldr	r6, [r6, #0]
 800471a:	e7f7      	b.n	800470c <__sfp+0x14>
 800471c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004720:	b16d      	cbz	r5, 800473e <__sfp+0x46>
 8004722:	3468      	adds	r4, #104	; 0x68
 8004724:	e7f4      	b.n	8004710 <__sfp+0x18>
 8004726:	2104      	movs	r1, #4
 8004728:	4638      	mov	r0, r7
 800472a:	f7ff ff9f 	bl	800466c <__sfmoreglue>
 800472e:	6030      	str	r0, [r6, #0]
 8004730:	2800      	cmp	r0, #0
 8004732:	d1f1      	bne.n	8004718 <__sfp+0x20>
 8004734:	230c      	movs	r3, #12
 8004736:	4604      	mov	r4, r0
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4620      	mov	r0, r4
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <__sfp+0x74>)
 8004740:	6665      	str	r5, [r4, #100]	; 0x64
 8004742:	e9c4 5500 	strd	r5, r5, [r4]
 8004746:	60a5      	str	r5, [r4, #8]
 8004748:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800474c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004750:	2208      	movs	r2, #8
 8004752:	4629      	mov	r1, r5
 8004754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004758:	f7fe fdc3 	bl	80032e2 <memset>
 800475c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004764:	e7e9      	b.n	800473a <__sfp+0x42>
 8004766:	bf00      	nop
 8004768:	08005524 	.word	0x08005524
 800476c:	ffff0001 	.word	0xffff0001

08004770 <_fwalk_reent>:
 8004770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	2600      	movs	r6, #0
 800477a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800477e:	b914      	cbnz	r4, 8004786 <_fwalk_reent+0x16>
 8004780:	4630      	mov	r0, r6
 8004782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004786:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800478a:	3f01      	subs	r7, #1
 800478c:	d501      	bpl.n	8004792 <_fwalk_reent+0x22>
 800478e:	6824      	ldr	r4, [r4, #0]
 8004790:	e7f5      	b.n	800477e <_fwalk_reent+0xe>
 8004792:	89ab      	ldrh	r3, [r5, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d907      	bls.n	80047a8 <_fwalk_reent+0x38>
 8004798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800479c:	3301      	adds	r3, #1
 800479e:	d003      	beq.n	80047a8 <_fwalk_reent+0x38>
 80047a0:	4629      	mov	r1, r5
 80047a2:	4640      	mov	r0, r8
 80047a4:	47c8      	blx	r9
 80047a6:	4306      	orrs	r6, r0
 80047a8:	3568      	adds	r5, #104	; 0x68
 80047aa:	e7ee      	b.n	800478a <_fwalk_reent+0x1a>

080047ac <_localeconv_r>:
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <_localeconv_r+0x14>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a18      	ldr	r0, [r3, #32]
 80047b2:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <_localeconv_r+0x18>)
 80047b4:	2800      	cmp	r0, #0
 80047b6:	bf08      	it	eq
 80047b8:	4618      	moveq	r0, r3
 80047ba:	30f0      	adds	r0, #240	; 0xf0
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000008c 	.word	0x2000008c
 80047c4:	200000f0 	.word	0x200000f0

080047c8 <malloc>:
 80047c8:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <malloc+0xc>)
 80047ca:	4601      	mov	r1, r0
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f000 bb45 	b.w	8004e5c <_malloc_r>
 80047d2:	bf00      	nop
 80047d4:	2000008c 	.word	0x2000008c

080047d8 <memcpy>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	1e43      	subs	r3, r0, #1
 80047dc:	440a      	add	r2, r1
 80047de:	4291      	cmp	r1, r2
 80047e0:	d100      	bne.n	80047e4 <memcpy+0xc>
 80047e2:	bd10      	pop	{r4, pc}
 80047e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ec:	e7f7      	b.n	80047de <memcpy+0x6>

080047ee <_Balloc>:
 80047ee:	b570      	push	{r4, r5, r6, lr}
 80047f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047f2:	4604      	mov	r4, r0
 80047f4:	460e      	mov	r6, r1
 80047f6:	b93d      	cbnz	r5, 8004808 <_Balloc+0x1a>
 80047f8:	2010      	movs	r0, #16
 80047fa:	f7ff ffe5 	bl	80047c8 <malloc>
 80047fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004804:	6005      	str	r5, [r0, #0]
 8004806:	60c5      	str	r5, [r0, #12]
 8004808:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800480a:	68eb      	ldr	r3, [r5, #12]
 800480c:	b183      	cbz	r3, 8004830 <_Balloc+0x42>
 800480e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004816:	b9b8      	cbnz	r0, 8004848 <_Balloc+0x5a>
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f506 	lsl.w	r5, r1, r6
 800481e:	1d6a      	adds	r2, r5, #5
 8004820:	0092      	lsls	r2, r2, #2
 8004822:	4620      	mov	r0, r4
 8004824:	f000 fabf 	bl	8004da6 <_calloc_r>
 8004828:	b160      	cbz	r0, 8004844 <_Balloc+0x56>
 800482a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800482e:	e00e      	b.n	800484e <_Balloc+0x60>
 8004830:	2221      	movs	r2, #33	; 0x21
 8004832:	2104      	movs	r1, #4
 8004834:	4620      	mov	r0, r4
 8004836:	f000 fab6 	bl	8004da6 <_calloc_r>
 800483a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800483c:	60e8      	str	r0, [r5, #12]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e4      	bne.n	800480e <_Balloc+0x20>
 8004844:	2000      	movs	r0, #0
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	6802      	ldr	r2, [r0, #0]
 800484a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800484e:	2300      	movs	r3, #0
 8004850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004854:	e7f7      	b.n	8004846 <_Balloc+0x58>

08004856 <_Bfree>:
 8004856:	b570      	push	{r4, r5, r6, lr}
 8004858:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800485a:	4606      	mov	r6, r0
 800485c:	460d      	mov	r5, r1
 800485e:	b93c      	cbnz	r4, 8004870 <_Bfree+0x1a>
 8004860:	2010      	movs	r0, #16
 8004862:	f7ff ffb1 	bl	80047c8 <malloc>
 8004866:	6270      	str	r0, [r6, #36]	; 0x24
 8004868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800486c:	6004      	str	r4, [r0, #0]
 800486e:	60c4      	str	r4, [r0, #12]
 8004870:	b13d      	cbz	r5, 8004882 <_Bfree+0x2c>
 8004872:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004874:	686a      	ldr	r2, [r5, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800487c:	6029      	str	r1, [r5, #0]
 800487e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004882:	bd70      	pop	{r4, r5, r6, pc}

08004884 <__multadd>:
 8004884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004888:	461f      	mov	r7, r3
 800488a:	4606      	mov	r6, r0
 800488c:	460c      	mov	r4, r1
 800488e:	2300      	movs	r3, #0
 8004890:	690d      	ldr	r5, [r1, #16]
 8004892:	f101 0c14 	add.w	ip, r1, #20
 8004896:	f8dc 0000 	ldr.w	r0, [ip]
 800489a:	3301      	adds	r3, #1
 800489c:	b281      	uxth	r1, r0
 800489e:	fb02 7101 	mla	r1, r2, r1, r7
 80048a2:	0c00      	lsrs	r0, r0, #16
 80048a4:	0c0f      	lsrs	r7, r1, #16
 80048a6:	fb02 7000 	mla	r0, r2, r0, r7
 80048aa:	b289      	uxth	r1, r1
 80048ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80048b0:	429d      	cmp	r5, r3
 80048b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80048b6:	f84c 1b04 	str.w	r1, [ip], #4
 80048ba:	dcec      	bgt.n	8004896 <__multadd+0x12>
 80048bc:	b1d7      	cbz	r7, 80048f4 <__multadd+0x70>
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	dc12      	bgt.n	80048ea <__multadd+0x66>
 80048c4:	6861      	ldr	r1, [r4, #4]
 80048c6:	4630      	mov	r0, r6
 80048c8:	3101      	adds	r1, #1
 80048ca:	f7ff ff90 	bl	80047ee <_Balloc>
 80048ce:	4680      	mov	r8, r0
 80048d0:	6922      	ldr	r2, [r4, #16]
 80048d2:	f104 010c 	add.w	r1, r4, #12
 80048d6:	3202      	adds	r2, #2
 80048d8:	0092      	lsls	r2, r2, #2
 80048da:	300c      	adds	r0, #12
 80048dc:	f7ff ff7c 	bl	80047d8 <memcpy>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff ffb7 	bl	8004856 <_Bfree>
 80048e8:	4644      	mov	r4, r8
 80048ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048ee:	3501      	adds	r5, #1
 80048f0:	615f      	str	r7, [r3, #20]
 80048f2:	6125      	str	r5, [r4, #16]
 80048f4:	4620      	mov	r0, r4
 80048f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048fa <__hi0bits>:
 80048fa:	0c02      	lsrs	r2, r0, #16
 80048fc:	0412      	lsls	r2, r2, #16
 80048fe:	4603      	mov	r3, r0
 8004900:	b9b2      	cbnz	r2, 8004930 <__hi0bits+0x36>
 8004902:	0403      	lsls	r3, r0, #16
 8004904:	2010      	movs	r0, #16
 8004906:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800490a:	bf04      	itt	eq
 800490c:	021b      	lsleq	r3, r3, #8
 800490e:	3008      	addeq	r0, #8
 8004910:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004914:	bf04      	itt	eq
 8004916:	011b      	lsleq	r3, r3, #4
 8004918:	3004      	addeq	r0, #4
 800491a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800491e:	bf04      	itt	eq
 8004920:	009b      	lsleq	r3, r3, #2
 8004922:	3002      	addeq	r0, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	db06      	blt.n	8004936 <__hi0bits+0x3c>
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	d503      	bpl.n	8004934 <__hi0bits+0x3a>
 800492c:	3001      	adds	r0, #1
 800492e:	4770      	bx	lr
 8004930:	2000      	movs	r0, #0
 8004932:	e7e8      	b.n	8004906 <__hi0bits+0xc>
 8004934:	2020      	movs	r0, #32
 8004936:	4770      	bx	lr

08004938 <__lo0bits>:
 8004938:	6803      	ldr	r3, [r0, #0]
 800493a:	4601      	mov	r1, r0
 800493c:	f013 0207 	ands.w	r2, r3, #7
 8004940:	d00b      	beq.n	800495a <__lo0bits+0x22>
 8004942:	07da      	lsls	r2, r3, #31
 8004944:	d423      	bmi.n	800498e <__lo0bits+0x56>
 8004946:	0798      	lsls	r0, r3, #30
 8004948:	bf49      	itett	mi
 800494a:	085b      	lsrmi	r3, r3, #1
 800494c:	089b      	lsrpl	r3, r3, #2
 800494e:	2001      	movmi	r0, #1
 8004950:	600b      	strmi	r3, [r1, #0]
 8004952:	bf5c      	itt	pl
 8004954:	600b      	strpl	r3, [r1, #0]
 8004956:	2002      	movpl	r0, #2
 8004958:	4770      	bx	lr
 800495a:	b298      	uxth	r0, r3
 800495c:	b9a8      	cbnz	r0, 800498a <__lo0bits+0x52>
 800495e:	2010      	movs	r0, #16
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004966:	bf04      	itt	eq
 8004968:	0a1b      	lsreq	r3, r3, #8
 800496a:	3008      	addeq	r0, #8
 800496c:	071a      	lsls	r2, r3, #28
 800496e:	bf04      	itt	eq
 8004970:	091b      	lsreq	r3, r3, #4
 8004972:	3004      	addeq	r0, #4
 8004974:	079a      	lsls	r2, r3, #30
 8004976:	bf04      	itt	eq
 8004978:	089b      	lsreq	r3, r3, #2
 800497a:	3002      	addeq	r0, #2
 800497c:	07da      	lsls	r2, r3, #31
 800497e:	d402      	bmi.n	8004986 <__lo0bits+0x4e>
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	d006      	beq.n	8004992 <__lo0bits+0x5a>
 8004984:	3001      	adds	r0, #1
 8004986:	600b      	str	r3, [r1, #0]
 8004988:	4770      	bx	lr
 800498a:	4610      	mov	r0, r2
 800498c:	e7e9      	b.n	8004962 <__lo0bits+0x2a>
 800498e:	2000      	movs	r0, #0
 8004990:	4770      	bx	lr
 8004992:	2020      	movs	r0, #32
 8004994:	4770      	bx	lr

08004996 <__i2b>:
 8004996:	b510      	push	{r4, lr}
 8004998:	460c      	mov	r4, r1
 800499a:	2101      	movs	r1, #1
 800499c:	f7ff ff27 	bl	80047ee <_Balloc>
 80049a0:	2201      	movs	r2, #1
 80049a2:	6144      	str	r4, [r0, #20]
 80049a4:	6102      	str	r2, [r0, #16]
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <__multiply>:
 80049a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	4614      	mov	r4, r2
 80049ae:	690a      	ldr	r2, [r1, #16]
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	4688      	mov	r8, r1
 80049b4:	429a      	cmp	r2, r3
 80049b6:	bfbe      	ittt	lt
 80049b8:	460b      	movlt	r3, r1
 80049ba:	46a0      	movlt	r8, r4
 80049bc:	461c      	movlt	r4, r3
 80049be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80049c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80049c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80049ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80049ce:	eb07 0609 	add.w	r6, r7, r9
 80049d2:	42b3      	cmp	r3, r6
 80049d4:	bfb8      	it	lt
 80049d6:	3101      	addlt	r1, #1
 80049d8:	f7ff ff09 	bl	80047ee <_Balloc>
 80049dc:	f100 0514 	add.w	r5, r0, #20
 80049e0:	462b      	mov	r3, r5
 80049e2:	2200      	movs	r2, #0
 80049e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80049e8:	4573      	cmp	r3, lr
 80049ea:	d316      	bcc.n	8004a1a <__multiply+0x72>
 80049ec:	f104 0214 	add.w	r2, r4, #20
 80049f0:	f108 0114 	add.w	r1, r8, #20
 80049f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80049f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	9b00      	ldr	r3, [sp, #0]
 8004a00:	9201      	str	r2, [sp, #4]
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d80c      	bhi.n	8004a20 <__multiply+0x78>
 8004a06:	2e00      	cmp	r6, #0
 8004a08:	dd03      	ble.n	8004a12 <__multiply+0x6a>
 8004a0a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d05d      	beq.n	8004ace <__multiply+0x126>
 8004a12:	6106      	str	r6, [r0, #16]
 8004a14:	b003      	add	sp, #12
 8004a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1a:	f843 2b04 	str.w	r2, [r3], #4
 8004a1e:	e7e3      	b.n	80049e8 <__multiply+0x40>
 8004a20:	f8b2 b000 	ldrh.w	fp, [r2]
 8004a24:	f1bb 0f00 	cmp.w	fp, #0
 8004a28:	d023      	beq.n	8004a72 <__multiply+0xca>
 8004a2a:	4689      	mov	r9, r1
 8004a2c:	46ac      	mov	ip, r5
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	f859 4b04 	ldr.w	r4, [r9], #4
 8004a36:	f8dc a000 	ldr.w	sl, [ip]
 8004a3a:	b2a3      	uxth	r3, r4
 8004a3c:	fa1f fa8a 	uxth.w	sl, sl
 8004a40:	fb0b a303 	mla	r3, fp, r3, sl
 8004a44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004a48:	f8dc 4000 	ldr.w	r4, [ip]
 8004a4c:	4443      	add	r3, r8
 8004a4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004a52:	fb0b 840a 	mla	r4, fp, sl, r8
 8004a56:	46e2      	mov	sl, ip
 8004a58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a62:	454f      	cmp	r7, r9
 8004a64:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004a68:	f84a 3b04 	str.w	r3, [sl], #4
 8004a6c:	d82b      	bhi.n	8004ac6 <__multiply+0x11e>
 8004a6e:	f8cc 8004 	str.w	r8, [ip, #4]
 8004a72:	9b01      	ldr	r3, [sp, #4]
 8004a74:	3204      	adds	r2, #4
 8004a76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004a7a:	f1ba 0f00 	cmp.w	sl, #0
 8004a7e:	d020      	beq.n	8004ac2 <__multiply+0x11a>
 8004a80:	4689      	mov	r9, r1
 8004a82:	46a8      	mov	r8, r5
 8004a84:	f04f 0b00 	mov.w	fp, #0
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	f8b9 c000 	ldrh.w	ip, [r9]
 8004a8e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	fb0a 440c 	mla	r4, sl, ip, r4
 8004a98:	46c4      	mov	ip, r8
 8004a9a:	445c      	add	r4, fp
 8004a9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8004aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004aa8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	fb0a b303 	mla	r3, sl, r3, fp
 8004ab2:	454f      	cmp	r7, r9
 8004ab4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ab8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004abc:	d805      	bhi.n	8004aca <__multiply+0x122>
 8004abe:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ac2:	3504      	adds	r5, #4
 8004ac4:	e79b      	b.n	80049fe <__multiply+0x56>
 8004ac6:	46d4      	mov	ip, sl
 8004ac8:	e7b3      	b.n	8004a32 <__multiply+0x8a>
 8004aca:	46e0      	mov	r8, ip
 8004acc:	e7dd      	b.n	8004a8a <__multiply+0xe2>
 8004ace:	3e01      	subs	r6, #1
 8004ad0:	e799      	b.n	8004a06 <__multiply+0x5e>
	...

08004ad4 <__pow5mult>:
 8004ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	4615      	mov	r5, r2
 8004ada:	f012 0203 	ands.w	r2, r2, #3
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460f      	mov	r7, r1
 8004ae2:	d007      	beq.n	8004af4 <__pow5mult+0x20>
 8004ae4:	4c21      	ldr	r4, [pc, #132]	; (8004b6c <__pow5mult+0x98>)
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aee:	f7ff fec9 	bl	8004884 <__multadd>
 8004af2:	4607      	mov	r7, r0
 8004af4:	10ad      	asrs	r5, r5, #2
 8004af6:	d035      	beq.n	8004b64 <__pow5mult+0x90>
 8004af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004afa:	b93c      	cbnz	r4, 8004b0c <__pow5mult+0x38>
 8004afc:	2010      	movs	r0, #16
 8004afe:	f7ff fe63 	bl	80047c8 <malloc>
 8004b02:	6270      	str	r0, [r6, #36]	; 0x24
 8004b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b08:	6004      	str	r4, [r0, #0]
 8004b0a:	60c4      	str	r4, [r0, #12]
 8004b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b14:	b94c      	cbnz	r4, 8004b2a <__pow5mult+0x56>
 8004b16:	f240 2171 	movw	r1, #625	; 0x271
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff ff3b 	bl	8004996 <__i2b>
 8004b20:	2300      	movs	r3, #0
 8004b22:	4604      	mov	r4, r0
 8004b24:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b28:	6003      	str	r3, [r0, #0]
 8004b2a:	f04f 0800 	mov.w	r8, #0
 8004b2e:	07eb      	lsls	r3, r5, #31
 8004b30:	d50a      	bpl.n	8004b48 <__pow5mult+0x74>
 8004b32:	4639      	mov	r1, r7
 8004b34:	4622      	mov	r2, r4
 8004b36:	4630      	mov	r0, r6
 8004b38:	f7ff ff36 	bl	80049a8 <__multiply>
 8004b3c:	4681      	mov	r9, r0
 8004b3e:	4639      	mov	r1, r7
 8004b40:	4630      	mov	r0, r6
 8004b42:	f7ff fe88 	bl	8004856 <_Bfree>
 8004b46:	464f      	mov	r7, r9
 8004b48:	106d      	asrs	r5, r5, #1
 8004b4a:	d00b      	beq.n	8004b64 <__pow5mult+0x90>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	b938      	cbnz	r0, 8004b60 <__pow5mult+0x8c>
 8004b50:	4622      	mov	r2, r4
 8004b52:	4621      	mov	r1, r4
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7ff ff27 	bl	80049a8 <__multiply>
 8004b5a:	6020      	str	r0, [r4, #0]
 8004b5c:	f8c0 8000 	str.w	r8, [r0]
 8004b60:	4604      	mov	r4, r0
 8004b62:	e7e4      	b.n	8004b2e <__pow5mult+0x5a>
 8004b64:	4638      	mov	r0, r7
 8004b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6a:	bf00      	nop
 8004b6c:	08005698 	.word	0x08005698

08004b70 <__lshift>:
 8004b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	4607      	mov	r7, r0
 8004b78:	4616      	mov	r6, r2
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b80:	eb0a 0903 	add.w	r9, sl, r3
 8004b84:	6849      	ldr	r1, [r1, #4]
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	f109 0501 	add.w	r5, r9, #1
 8004b8c:	42ab      	cmp	r3, r5
 8004b8e:	db32      	blt.n	8004bf6 <__lshift+0x86>
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff fe2c 	bl	80047ee <_Balloc>
 8004b96:	2300      	movs	r3, #0
 8004b98:	4680      	mov	r8, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f100 0114 	add.w	r1, r0, #20
 8004ba0:	4553      	cmp	r3, sl
 8004ba2:	db2b      	blt.n	8004bfc <__lshift+0x8c>
 8004ba4:	6920      	ldr	r0, [r4, #16]
 8004ba6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004baa:	f104 0314 	add.w	r3, r4, #20
 8004bae:	f016 021f 	ands.w	r2, r6, #31
 8004bb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004bb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004bba:	d025      	beq.n	8004c08 <__lshift+0x98>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f1c2 0e20 	rsb	lr, r2, #32
 8004bc2:	468a      	mov	sl, r1
 8004bc4:	681e      	ldr	r6, [r3, #0]
 8004bc6:	4096      	lsls	r6, r2
 8004bc8:	4330      	orrs	r0, r6
 8004bca:	f84a 0b04 	str.w	r0, [sl], #4
 8004bce:	f853 0b04 	ldr.w	r0, [r3], #4
 8004bd2:	459c      	cmp	ip, r3
 8004bd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8004bd8:	d814      	bhi.n	8004c04 <__lshift+0x94>
 8004bda:	6048      	str	r0, [r1, #4]
 8004bdc:	b108      	cbz	r0, 8004be2 <__lshift+0x72>
 8004bde:	f109 0502 	add.w	r5, r9, #2
 8004be2:	3d01      	subs	r5, #1
 8004be4:	4638      	mov	r0, r7
 8004be6:	f8c8 5010 	str.w	r5, [r8, #16]
 8004bea:	4621      	mov	r1, r4
 8004bec:	f7ff fe33 	bl	8004856 <_Bfree>
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf6:	3101      	adds	r1, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	e7c7      	b.n	8004b8c <__lshift+0x1c>
 8004bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c00:	3301      	adds	r3, #1
 8004c02:	e7cd      	b.n	8004ba0 <__lshift+0x30>
 8004c04:	4651      	mov	r1, sl
 8004c06:	e7dc      	b.n	8004bc2 <__lshift+0x52>
 8004c08:	3904      	subs	r1, #4
 8004c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0e:	459c      	cmp	ip, r3
 8004c10:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c14:	d8f9      	bhi.n	8004c0a <__lshift+0x9a>
 8004c16:	e7e4      	b.n	8004be2 <__lshift+0x72>

08004c18 <__mcmp>:
 8004c18:	6903      	ldr	r3, [r0, #16]
 8004c1a:	690a      	ldr	r2, [r1, #16]
 8004c1c:	b530      	push	{r4, r5, lr}
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	d10c      	bne.n	8004c3c <__mcmp+0x24>
 8004c22:	0092      	lsls	r2, r2, #2
 8004c24:	3014      	adds	r0, #20
 8004c26:	3114      	adds	r1, #20
 8004c28:	1884      	adds	r4, r0, r2
 8004c2a:	4411      	add	r1, r2
 8004c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c34:	4295      	cmp	r5, r2
 8004c36:	d003      	beq.n	8004c40 <__mcmp+0x28>
 8004c38:	d305      	bcc.n	8004c46 <__mcmp+0x2e>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd30      	pop	{r4, r5, pc}
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d3f3      	bcc.n	8004c2c <__mcmp+0x14>
 8004c44:	e7fa      	b.n	8004c3c <__mcmp+0x24>
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4a:	e7f7      	b.n	8004c3c <__mcmp+0x24>

08004c4c <__mdiff>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	460d      	mov	r5, r1
 8004c52:	4607      	mov	r7, r0
 8004c54:	4611      	mov	r1, r2
 8004c56:	4628      	mov	r0, r5
 8004c58:	4614      	mov	r4, r2
 8004c5a:	f7ff ffdd 	bl	8004c18 <__mcmp>
 8004c5e:	1e06      	subs	r6, r0, #0
 8004c60:	d108      	bne.n	8004c74 <__mdiff+0x28>
 8004c62:	4631      	mov	r1, r6
 8004c64:	4638      	mov	r0, r7
 8004c66:	f7ff fdc2 	bl	80047ee <_Balloc>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	bfa4      	itt	ge
 8004c76:	4623      	movge	r3, r4
 8004c78:	462c      	movge	r4, r5
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	bfa6      	itte	ge
 8004c80:	461d      	movge	r5, r3
 8004c82:	2600      	movge	r6, #0
 8004c84:	2601      	movlt	r6, #1
 8004c86:	f7ff fdb2 	bl	80047ee <_Balloc>
 8004c8a:	f04f 0e00 	mov.w	lr, #0
 8004c8e:	60c6      	str	r6, [r0, #12]
 8004c90:	692b      	ldr	r3, [r5, #16]
 8004c92:	6926      	ldr	r6, [r4, #16]
 8004c94:	f104 0214 	add.w	r2, r4, #20
 8004c98:	f105 0914 	add.w	r9, r5, #20
 8004c9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004ca0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004ca4:	f100 0114 	add.w	r1, r0, #20
 8004ca8:	f852 ab04 	ldr.w	sl, [r2], #4
 8004cac:	f859 5b04 	ldr.w	r5, [r9], #4
 8004cb0:	fa1f f38a 	uxth.w	r3, sl
 8004cb4:	4473      	add	r3, lr
 8004cb6:	b2ac      	uxth	r4, r5
 8004cb8:	1b1b      	subs	r3, r3, r4
 8004cba:	0c2c      	lsrs	r4, r5, #16
 8004cbc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004cc0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004cca:	45c8      	cmp	r8, r9
 8004ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004cd0:	4694      	mov	ip, r2
 8004cd2:	f841 4b04 	str.w	r4, [r1], #4
 8004cd6:	d8e7      	bhi.n	8004ca8 <__mdiff+0x5c>
 8004cd8:	45bc      	cmp	ip, r7
 8004cda:	d304      	bcc.n	8004ce6 <__mdiff+0x9a>
 8004cdc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ce0:	b183      	cbz	r3, 8004d04 <__mdiff+0xb8>
 8004ce2:	6106      	str	r6, [r0, #16]
 8004ce4:	e7c4      	b.n	8004c70 <__mdiff+0x24>
 8004ce6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004cea:	b2a2      	uxth	r2, r4
 8004cec:	4472      	add	r2, lr
 8004cee:	1413      	asrs	r3, r2, #16
 8004cf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004cfa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004cfe:	f841 2b04 	str.w	r2, [r1], #4
 8004d02:	e7e9      	b.n	8004cd8 <__mdiff+0x8c>
 8004d04:	3e01      	subs	r6, #1
 8004d06:	e7e9      	b.n	8004cdc <__mdiff+0x90>

08004d08 <__d2b>:
 8004d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d0c:	461c      	mov	r4, r3
 8004d0e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004d12:	2101      	movs	r1, #1
 8004d14:	4690      	mov	r8, r2
 8004d16:	f7ff fd6a 	bl	80047ee <_Balloc>
 8004d1a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004d1e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004d22:	4607      	mov	r7, r0
 8004d24:	bb34      	cbnz	r4, 8004d74 <__d2b+0x6c>
 8004d26:	9201      	str	r2, [sp, #4]
 8004d28:	f1b8 0200 	subs.w	r2, r8, #0
 8004d2c:	d027      	beq.n	8004d7e <__d2b+0x76>
 8004d2e:	a802      	add	r0, sp, #8
 8004d30:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004d34:	f7ff fe00 	bl	8004938 <__lo0bits>
 8004d38:	9900      	ldr	r1, [sp, #0]
 8004d3a:	b1f0      	cbz	r0, 8004d7a <__d2b+0x72>
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	f1c0 0320 	rsb	r3, r0, #32
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	430b      	orrs	r3, r1
 8004d48:	40c2      	lsrs	r2, r0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	9201      	str	r2, [sp, #4]
 8004d4e:	9b01      	ldr	r3, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2102      	movne	r1, #2
 8004d56:	2101      	moveq	r1, #1
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	6139      	str	r1, [r7, #16]
 8004d5c:	b1c4      	cbz	r4, 8004d90 <__d2b+0x88>
 8004d5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004d62:	4404      	add	r4, r0
 8004d64:	6034      	str	r4, [r6, #0]
 8004d66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d6a:	6028      	str	r0, [r5, #0]
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	b002      	add	sp, #8
 8004d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d74:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d78:	e7d5      	b.n	8004d26 <__d2b+0x1e>
 8004d7a:	6179      	str	r1, [r7, #20]
 8004d7c:	e7e7      	b.n	8004d4e <__d2b+0x46>
 8004d7e:	a801      	add	r0, sp, #4
 8004d80:	f7ff fdda 	bl	8004938 <__lo0bits>
 8004d84:	2101      	movs	r1, #1
 8004d86:	9b01      	ldr	r3, [sp, #4]
 8004d88:	6139      	str	r1, [r7, #16]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	3020      	adds	r0, #32
 8004d8e:	e7e5      	b.n	8004d5c <__d2b+0x54>
 8004d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d94:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	6918      	ldr	r0, [r3, #16]
 8004d9c:	f7ff fdad 	bl	80048fa <__hi0bits>
 8004da0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004da4:	e7e1      	b.n	8004d6a <__d2b+0x62>

08004da6 <_calloc_r>:
 8004da6:	b538      	push	{r3, r4, r5, lr}
 8004da8:	fb02 f401 	mul.w	r4, r2, r1
 8004dac:	4621      	mov	r1, r4
 8004dae:	f000 f855 	bl	8004e5c <_malloc_r>
 8004db2:	4605      	mov	r5, r0
 8004db4:	b118      	cbz	r0, 8004dbe <_calloc_r+0x18>
 8004db6:	4622      	mov	r2, r4
 8004db8:	2100      	movs	r1, #0
 8004dba:	f7fe fa92 	bl	80032e2 <memset>
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08004dc4 <_free_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	d043      	beq.n	8004e54 <_free_r+0x90>
 8004dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd0:	1f0c      	subs	r4, r1, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bfb8      	it	lt
 8004dd6:	18e4      	addlt	r4, r4, r3
 8004dd8:	f000 fb3e 	bl	8005458 <__malloc_lock>
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <_free_r+0x94>)
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	4610      	mov	r0, r2
 8004de2:	b933      	cbnz	r3, 8004df2 <_free_r+0x2e>
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	6014      	str	r4, [r2, #0]
 8004de8:	4628      	mov	r0, r5
 8004dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dee:	f000 bb34 	b.w	800545a <__malloc_unlock>
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	d90b      	bls.n	8004e0e <_free_r+0x4a>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	1862      	adds	r2, r4, r1
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bf01      	itttt	eq
 8004dfe:	681a      	ldreq	r2, [r3, #0]
 8004e00:	685b      	ldreq	r3, [r3, #4]
 8004e02:	1852      	addeq	r2, r2, r1
 8004e04:	6022      	streq	r2, [r4, #0]
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	6004      	str	r4, [r0, #0]
 8004e0a:	e7ed      	b.n	8004de8 <_free_r+0x24>
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	b10a      	cbz	r2, 8004e16 <_free_r+0x52>
 8004e12:	42a2      	cmp	r2, r4
 8004e14:	d9fa      	bls.n	8004e0c <_free_r+0x48>
 8004e16:	6819      	ldr	r1, [r3, #0]
 8004e18:	1858      	adds	r0, r3, r1
 8004e1a:	42a0      	cmp	r0, r4
 8004e1c:	d10b      	bne.n	8004e36 <_free_r+0x72>
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	4401      	add	r1, r0
 8004e22:	1858      	adds	r0, r3, r1
 8004e24:	4282      	cmp	r2, r0
 8004e26:	6019      	str	r1, [r3, #0]
 8004e28:	d1de      	bne.n	8004de8 <_free_r+0x24>
 8004e2a:	6810      	ldr	r0, [r2, #0]
 8004e2c:	6852      	ldr	r2, [r2, #4]
 8004e2e:	4401      	add	r1, r0
 8004e30:	6019      	str	r1, [r3, #0]
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	e7d8      	b.n	8004de8 <_free_r+0x24>
 8004e36:	d902      	bls.n	8004e3e <_free_r+0x7a>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	e7d4      	b.n	8004de8 <_free_r+0x24>
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1821      	adds	r1, r4, r0
 8004e42:	428a      	cmp	r2, r1
 8004e44:	bf01      	itttt	eq
 8004e46:	6811      	ldreq	r1, [r2, #0]
 8004e48:	6852      	ldreq	r2, [r2, #4]
 8004e4a:	1809      	addeq	r1, r1, r0
 8004e4c:	6021      	streq	r1, [r4, #0]
 8004e4e:	6062      	str	r2, [r4, #4]
 8004e50:	605c      	str	r4, [r3, #4]
 8004e52:	e7c9      	b.n	8004de8 <_free_r+0x24>
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
 8004e56:	bf00      	nop
 8004e58:	20000308 	.word	0x20000308

08004e5c <_malloc_r>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	1ccd      	adds	r5, r1, #3
 8004e60:	f025 0503 	bic.w	r5, r5, #3
 8004e64:	3508      	adds	r5, #8
 8004e66:	2d0c      	cmp	r5, #12
 8004e68:	bf38      	it	cc
 8004e6a:	250c      	movcc	r5, #12
 8004e6c:	2d00      	cmp	r5, #0
 8004e6e:	4606      	mov	r6, r0
 8004e70:	db01      	blt.n	8004e76 <_malloc_r+0x1a>
 8004e72:	42a9      	cmp	r1, r5
 8004e74:	d903      	bls.n	8004e7e <_malloc_r+0x22>
 8004e76:	230c      	movs	r3, #12
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	f000 faeb 	bl	8005458 <__malloc_lock>
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <_malloc_r+0xac>)
 8004e84:	6814      	ldr	r4, [r2, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	b991      	cbnz	r1, 8004eb0 <_malloc_r+0x54>
 8004e8a:	4c20      	ldr	r4, [pc, #128]	; (8004f0c <_malloc_r+0xb0>)
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	b91b      	cbnz	r3, 8004e98 <_malloc_r+0x3c>
 8004e90:	4630      	mov	r0, r6
 8004e92:	f000 f873 	bl	8004f7c <_sbrk_r>
 8004e96:	6020      	str	r0, [r4, #0]
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f86e 	bl	8004f7c <_sbrk_r>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d124      	bne.n	8004eee <_malloc_r+0x92>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	f000 fad6 	bl	800545a <__malloc_unlock>
 8004eae:	e7e4      	b.n	8004e7a <_malloc_r+0x1e>
 8004eb0:	680b      	ldr	r3, [r1, #0]
 8004eb2:	1b5b      	subs	r3, r3, r5
 8004eb4:	d418      	bmi.n	8004ee8 <_malloc_r+0x8c>
 8004eb6:	2b0b      	cmp	r3, #11
 8004eb8:	d90f      	bls.n	8004eda <_malloc_r+0x7e>
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	18cc      	adds	r4, r1, r3
 8004ebe:	50cd      	str	r5, [r1, r3]
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f000 faca 	bl	800545a <__malloc_unlock>
 8004ec6:	f104 000b 	add.w	r0, r4, #11
 8004eca:	1d23      	adds	r3, r4, #4
 8004ecc:	f020 0007 	bic.w	r0, r0, #7
 8004ed0:	1ac3      	subs	r3, r0, r3
 8004ed2:	d0d3      	beq.n	8004e7c <_malloc_r+0x20>
 8004ed4:	425a      	negs	r2, r3
 8004ed6:	50e2      	str	r2, [r4, r3]
 8004ed8:	e7d0      	b.n	8004e7c <_malloc_r+0x20>
 8004eda:	684b      	ldr	r3, [r1, #4]
 8004edc:	428c      	cmp	r4, r1
 8004ede:	bf16      	itet	ne
 8004ee0:	6063      	strne	r3, [r4, #4]
 8004ee2:	6013      	streq	r3, [r2, #0]
 8004ee4:	460c      	movne	r4, r1
 8004ee6:	e7eb      	b.n	8004ec0 <_malloc_r+0x64>
 8004ee8:	460c      	mov	r4, r1
 8004eea:	6849      	ldr	r1, [r1, #4]
 8004eec:	e7cc      	b.n	8004e88 <_malloc_r+0x2c>
 8004eee:	1cc4      	adds	r4, r0, #3
 8004ef0:	f024 0403 	bic.w	r4, r4, #3
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d005      	beq.n	8004f04 <_malloc_r+0xa8>
 8004ef8:	1a21      	subs	r1, r4, r0
 8004efa:	4630      	mov	r0, r6
 8004efc:	f000 f83e 	bl	8004f7c <_sbrk_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d0cf      	beq.n	8004ea4 <_malloc_r+0x48>
 8004f04:	6025      	str	r5, [r4, #0]
 8004f06:	e7db      	b.n	8004ec0 <_malloc_r+0x64>
 8004f08:	20000308 	.word	0x20000308
 8004f0c:	2000030c 	.word	0x2000030c

08004f10 <_putc_r>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	460d      	mov	r5, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	4606      	mov	r6, r0
 8004f18:	b118      	cbz	r0, 8004f22 <_putc_r+0x12>
 8004f1a:	6983      	ldr	r3, [r0, #24]
 8004f1c:	b90b      	cbnz	r3, 8004f22 <_putc_r+0x12>
 8004f1e:	f7ff fbbb 	bl	8004698 <__sinit>
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <_putc_r+0x60>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	d112      	bne.n	8004f4e <_putc_r+0x3e>
 8004f28:	6874      	ldr	r4, [r6, #4]
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	60a3      	str	r3, [r4, #8]
 8004f32:	da16      	bge.n	8004f62 <_putc_r+0x52>
 8004f34:	69a2      	ldr	r2, [r4, #24]
 8004f36:	4293      	cmp	r3, r2
 8004f38:	db02      	blt.n	8004f40 <_putc_r+0x30>
 8004f3a:	b2eb      	uxtb	r3, r5
 8004f3c:	2b0a      	cmp	r3, #10
 8004f3e:	d110      	bne.n	8004f62 <_putc_r+0x52>
 8004f40:	4622      	mov	r2, r4
 8004f42:	4629      	mov	r1, r5
 8004f44:	4630      	mov	r0, r6
 8004f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f4a:	f000 b86b 	b.w	8005024 <__swbuf_r>
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <_putc_r+0x64>)
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d101      	bne.n	8004f58 <_putc_r+0x48>
 8004f54:	68b4      	ldr	r4, [r6, #8]
 8004f56:	e7e8      	b.n	8004f2a <_putc_r+0x1a>
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <_putc_r+0x68>)
 8004f5a:	429c      	cmp	r4, r3
 8004f5c:	bf08      	it	eq
 8004f5e:	68f4      	ldreq	r4, [r6, #12]
 8004f60:	e7e3      	b.n	8004f2a <_putc_r+0x1a>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	b2e8      	uxtb	r0, r5
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	701d      	strb	r5, [r3, #0]
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
 8004f6e:	bf00      	nop
 8004f70:	08005568 	.word	0x08005568
 8004f74:	08005588 	.word	0x08005588
 8004f78:	08005548 	.word	0x08005548

08004f7c <_sbrk_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	2300      	movs	r3, #0
 8004f80:	4c05      	ldr	r4, [pc, #20]	; (8004f98 <_sbrk_r+0x1c>)
 8004f82:	4605      	mov	r5, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	f7fe f91a 	bl	80031c0 <_sbrk>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_sbrk_r+0x1a>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_sbrk_r+0x1a>
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	20000398 	.word	0x20000398

08004f9c <__sread>:
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	f000 fa5a 	bl	800545c <_read_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	bfab      	itete	ge
 8004fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fae:	89a3      	ldrhlt	r3, [r4, #12]
 8004fb0:	181b      	addge	r3, r3, r0
 8004fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fb6:	bfac      	ite	ge
 8004fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fba:	81a3      	strhlt	r3, [r4, #12]
 8004fbc:	bd10      	pop	{r4, pc}

08004fbe <__swrite>:
 8004fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	461f      	mov	r7, r3
 8004fc4:	898b      	ldrh	r3, [r1, #12]
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	05db      	lsls	r3, r3, #23
 8004fca:	460c      	mov	r4, r1
 8004fcc:	4616      	mov	r6, r2
 8004fce:	d505      	bpl.n	8004fdc <__swrite+0x1e>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd8:	f000 f9b6 	bl	8005348 <_lseek_r>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	4632      	mov	r2, r6
 8004fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fea:	463b      	mov	r3, r7
 8004fec:	4628      	mov	r0, r5
 8004fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	f000 b869 	b.w	80050c8 <_write_r>

08004ff6 <__sseek>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffe:	f000 f9a3 	bl	8005348 <_lseek_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	bf15      	itete	ne
 8005008:	6560      	strne	r0, [r4, #84]	; 0x54
 800500a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800500e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005012:	81a3      	strheq	r3, [r4, #12]
 8005014:	bf18      	it	ne
 8005016:	81a3      	strhne	r3, [r4, #12]
 8005018:	bd10      	pop	{r4, pc}

0800501a <__sclose>:
 800501a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501e:	f000 b8d3 	b.w	80051c8 <_close_r>
	...

08005024 <__swbuf_r>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	460e      	mov	r6, r1
 8005028:	4614      	mov	r4, r2
 800502a:	4605      	mov	r5, r0
 800502c:	b118      	cbz	r0, 8005036 <__swbuf_r+0x12>
 800502e:	6983      	ldr	r3, [r0, #24]
 8005030:	b90b      	cbnz	r3, 8005036 <__swbuf_r+0x12>
 8005032:	f7ff fb31 	bl	8004698 <__sinit>
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <__swbuf_r+0x98>)
 8005038:	429c      	cmp	r4, r3
 800503a:	d12a      	bne.n	8005092 <__swbuf_r+0x6e>
 800503c:	686c      	ldr	r4, [r5, #4]
 800503e:	69a3      	ldr	r3, [r4, #24]
 8005040:	60a3      	str	r3, [r4, #8]
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	071a      	lsls	r2, r3, #28
 8005046:	d52e      	bpl.n	80050a6 <__swbuf_r+0x82>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	b363      	cbz	r3, 80050a6 <__swbuf_r+0x82>
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	b2f6      	uxtb	r6, r6
 8005052:	1ac0      	subs	r0, r0, r3
 8005054:	6963      	ldr	r3, [r4, #20]
 8005056:	4637      	mov	r7, r6
 8005058:	4283      	cmp	r3, r0
 800505a:	dc04      	bgt.n	8005066 <__swbuf_r+0x42>
 800505c:	4621      	mov	r1, r4
 800505e:	4628      	mov	r0, r5
 8005060:	f000 f948 	bl	80052f4 <_fflush_r>
 8005064:	bb28      	cbnz	r0, 80050b2 <__swbuf_r+0x8e>
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	3001      	adds	r0, #1
 800506a:	3b01      	subs	r3, #1
 800506c:	60a3      	str	r3, [r4, #8]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	701e      	strb	r6, [r3, #0]
 8005076:	6963      	ldr	r3, [r4, #20]
 8005078:	4283      	cmp	r3, r0
 800507a:	d004      	beq.n	8005086 <__swbuf_r+0x62>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	07db      	lsls	r3, r3, #31
 8005080:	d519      	bpl.n	80050b6 <__swbuf_r+0x92>
 8005082:	2e0a      	cmp	r6, #10
 8005084:	d117      	bne.n	80050b6 <__swbuf_r+0x92>
 8005086:	4621      	mov	r1, r4
 8005088:	4628      	mov	r0, r5
 800508a:	f000 f933 	bl	80052f4 <_fflush_r>
 800508e:	b190      	cbz	r0, 80050b6 <__swbuf_r+0x92>
 8005090:	e00f      	b.n	80050b2 <__swbuf_r+0x8e>
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <__swbuf_r+0x9c>)
 8005094:	429c      	cmp	r4, r3
 8005096:	d101      	bne.n	800509c <__swbuf_r+0x78>
 8005098:	68ac      	ldr	r4, [r5, #8]
 800509a:	e7d0      	b.n	800503e <__swbuf_r+0x1a>
 800509c:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <__swbuf_r+0xa0>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	bf08      	it	eq
 80050a2:	68ec      	ldreq	r4, [r5, #12]
 80050a4:	e7cb      	b.n	800503e <__swbuf_r+0x1a>
 80050a6:	4621      	mov	r1, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f81f 	bl	80050ec <__swsetup_r>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d0cc      	beq.n	800504c <__swbuf_r+0x28>
 80050b2:	f04f 37ff 	mov.w	r7, #4294967295
 80050b6:	4638      	mov	r0, r7
 80050b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	08005568 	.word	0x08005568
 80050c0:	08005588 	.word	0x08005588
 80050c4:	08005548 	.word	0x08005548

080050c8 <_write_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4605      	mov	r5, r0
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	2200      	movs	r2, #0
 80050d2:	4c05      	ldr	r4, [pc, #20]	; (80050e8 <_write_r+0x20>)
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f7fd fde8 	bl	8002cac <_write>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_write_r+0x1e>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_write_r+0x1e>
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20000398 	.word	0x20000398

080050ec <__swsetup_r>:
 80050ec:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <__swsetup_r+0xcc>)
 80050ee:	b570      	push	{r4, r5, r6, lr}
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	4606      	mov	r6, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	b125      	cbz	r5, 8005102 <__swsetup_r+0x16>
 80050f8:	69ab      	ldr	r3, [r5, #24]
 80050fa:	b913      	cbnz	r3, 8005102 <__swsetup_r+0x16>
 80050fc:	4628      	mov	r0, r5
 80050fe:	f7ff facb 	bl	8004698 <__sinit>
 8005102:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <__swsetup_r+0xd0>)
 8005104:	429c      	cmp	r4, r3
 8005106:	d10f      	bne.n	8005128 <__swsetup_r+0x3c>
 8005108:	686c      	ldr	r4, [r5, #4]
 800510a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510e:	b29a      	uxth	r2, r3
 8005110:	0715      	lsls	r5, r2, #28
 8005112:	d42c      	bmi.n	800516e <__swsetup_r+0x82>
 8005114:	06d0      	lsls	r0, r2, #27
 8005116:	d411      	bmi.n	800513c <__swsetup_r+0x50>
 8005118:	2209      	movs	r2, #9
 800511a:	6032      	str	r2, [r6, #0]
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	f04f 30ff 	mov.w	r0, #4294967295
 8005126:	e03e      	b.n	80051a6 <__swsetup_r+0xba>
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <__swsetup_r+0xd4>)
 800512a:	429c      	cmp	r4, r3
 800512c:	d101      	bne.n	8005132 <__swsetup_r+0x46>
 800512e:	68ac      	ldr	r4, [r5, #8]
 8005130:	e7eb      	b.n	800510a <__swsetup_r+0x1e>
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <__swsetup_r+0xd8>)
 8005134:	429c      	cmp	r4, r3
 8005136:	bf08      	it	eq
 8005138:	68ec      	ldreq	r4, [r5, #12]
 800513a:	e7e6      	b.n	800510a <__swsetup_r+0x1e>
 800513c:	0751      	lsls	r1, r2, #29
 800513e:	d512      	bpl.n	8005166 <__swsetup_r+0x7a>
 8005140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005142:	b141      	cbz	r1, 8005156 <__swsetup_r+0x6a>
 8005144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005148:	4299      	cmp	r1, r3
 800514a:	d002      	beq.n	8005152 <__swsetup_r+0x66>
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff fe39 	bl	8004dc4 <_free_r>
 8005152:	2300      	movs	r3, #0
 8005154:	6363      	str	r3, [r4, #52]	; 0x34
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	2300      	movs	r3, #0
 8005160:	6063      	str	r3, [r4, #4]
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	f043 0308 	orr.w	r3, r3, #8
 800516c:	81a3      	strh	r3, [r4, #12]
 800516e:	6923      	ldr	r3, [r4, #16]
 8005170:	b94b      	cbnz	r3, 8005186 <__swsetup_r+0x9a>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517c:	d003      	beq.n	8005186 <__swsetup_r+0x9a>
 800517e:	4621      	mov	r1, r4
 8005180:	4630      	mov	r0, r6
 8005182:	f000 f917 	bl	80053b4 <__smakebuf_r>
 8005186:	89a2      	ldrh	r2, [r4, #12]
 8005188:	f012 0301 	ands.w	r3, r2, #1
 800518c:	d00c      	beq.n	80051a8 <__swsetup_r+0xbc>
 800518e:	2300      	movs	r3, #0
 8005190:	60a3      	str	r3, [r4, #8]
 8005192:	6963      	ldr	r3, [r4, #20]
 8005194:	425b      	negs	r3, r3
 8005196:	61a3      	str	r3, [r4, #24]
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	b953      	cbnz	r3, 80051b2 <__swsetup_r+0xc6>
 800519c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80051a4:	d1ba      	bne.n	800511c <__swsetup_r+0x30>
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	0792      	lsls	r2, r2, #30
 80051aa:	bf58      	it	pl
 80051ac:	6963      	ldrpl	r3, [r4, #20]
 80051ae:	60a3      	str	r3, [r4, #8]
 80051b0:	e7f2      	b.n	8005198 <__swsetup_r+0xac>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e7f7      	b.n	80051a6 <__swsetup_r+0xba>
 80051b6:	bf00      	nop
 80051b8:	2000008c 	.word	0x2000008c
 80051bc:	08005568 	.word	0x08005568
 80051c0:	08005588 	.word	0x08005588
 80051c4:	08005548 	.word	0x08005548

080051c8 <_close_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	2300      	movs	r3, #0
 80051cc:	4c05      	ldr	r4, [pc, #20]	; (80051e4 <_close_r+0x1c>)
 80051ce:	4605      	mov	r5, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	f7fd ffc3 	bl	800315e <_close>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_close_r+0x1a>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_close_r+0x1a>
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000398 	.word	0x20000398

080051e8 <__sflush_r>:
 80051e8:	898a      	ldrh	r2, [r1, #12]
 80051ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ee:	4605      	mov	r5, r0
 80051f0:	0710      	lsls	r0, r2, #28
 80051f2:	460c      	mov	r4, r1
 80051f4:	d458      	bmi.n	80052a8 <__sflush_r+0xc0>
 80051f6:	684b      	ldr	r3, [r1, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dc05      	bgt.n	8005208 <__sflush_r+0x20>
 80051fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dc02      	bgt.n	8005208 <__sflush_r+0x20>
 8005202:	2000      	movs	r0, #0
 8005204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800520a:	2e00      	cmp	r6, #0
 800520c:	d0f9      	beq.n	8005202 <__sflush_r+0x1a>
 800520e:	2300      	movs	r3, #0
 8005210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005214:	682f      	ldr	r7, [r5, #0]
 8005216:	6a21      	ldr	r1, [r4, #32]
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	d032      	beq.n	8005282 <__sflush_r+0x9a>
 800521c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	075a      	lsls	r2, r3, #29
 8005222:	d505      	bpl.n	8005230 <__sflush_r+0x48>
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	1ac0      	subs	r0, r0, r3
 8005228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800522a:	b10b      	cbz	r3, 8005230 <__sflush_r+0x48>
 800522c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800522e:	1ac0      	subs	r0, r0, r3
 8005230:	2300      	movs	r3, #0
 8005232:	4602      	mov	r2, r0
 8005234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005236:	6a21      	ldr	r1, [r4, #32]
 8005238:	4628      	mov	r0, r5
 800523a:	47b0      	blx	r6
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	d106      	bne.n	8005250 <__sflush_r+0x68>
 8005242:	6829      	ldr	r1, [r5, #0]
 8005244:	291d      	cmp	r1, #29
 8005246:	d848      	bhi.n	80052da <__sflush_r+0xf2>
 8005248:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <__sflush_r+0x108>)
 800524a:	40ca      	lsrs	r2, r1
 800524c:	07d6      	lsls	r6, r2, #31
 800524e:	d544      	bpl.n	80052da <__sflush_r+0xf2>
 8005250:	2200      	movs	r2, #0
 8005252:	6062      	str	r2, [r4, #4]
 8005254:	6922      	ldr	r2, [r4, #16]
 8005256:	04d9      	lsls	r1, r3, #19
 8005258:	6022      	str	r2, [r4, #0]
 800525a:	d504      	bpl.n	8005266 <__sflush_r+0x7e>
 800525c:	1c42      	adds	r2, r0, #1
 800525e:	d101      	bne.n	8005264 <__sflush_r+0x7c>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b903      	cbnz	r3, 8005266 <__sflush_r+0x7e>
 8005264:	6560      	str	r0, [r4, #84]	; 0x54
 8005266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005268:	602f      	str	r7, [r5, #0]
 800526a:	2900      	cmp	r1, #0
 800526c:	d0c9      	beq.n	8005202 <__sflush_r+0x1a>
 800526e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005272:	4299      	cmp	r1, r3
 8005274:	d002      	beq.n	800527c <__sflush_r+0x94>
 8005276:	4628      	mov	r0, r5
 8005278:	f7ff fda4 	bl	8004dc4 <_free_r>
 800527c:	2000      	movs	r0, #0
 800527e:	6360      	str	r0, [r4, #52]	; 0x34
 8005280:	e7c0      	b.n	8005204 <__sflush_r+0x1c>
 8005282:	2301      	movs	r3, #1
 8005284:	4628      	mov	r0, r5
 8005286:	47b0      	blx	r6
 8005288:	1c41      	adds	r1, r0, #1
 800528a:	d1c8      	bne.n	800521e <__sflush_r+0x36>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0c5      	beq.n	800521e <__sflush_r+0x36>
 8005292:	2b1d      	cmp	r3, #29
 8005294:	d001      	beq.n	800529a <__sflush_r+0xb2>
 8005296:	2b16      	cmp	r3, #22
 8005298:	d101      	bne.n	800529e <__sflush_r+0xb6>
 800529a:	602f      	str	r7, [r5, #0]
 800529c:	e7b1      	b.n	8005202 <__sflush_r+0x1a>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a4:	81a3      	strh	r3, [r4, #12]
 80052a6:	e7ad      	b.n	8005204 <__sflush_r+0x1c>
 80052a8:	690f      	ldr	r7, [r1, #16]
 80052aa:	2f00      	cmp	r7, #0
 80052ac:	d0a9      	beq.n	8005202 <__sflush_r+0x1a>
 80052ae:	0793      	lsls	r3, r2, #30
 80052b0:	bf18      	it	ne
 80052b2:	2300      	movne	r3, #0
 80052b4:	680e      	ldr	r6, [r1, #0]
 80052b6:	bf08      	it	eq
 80052b8:	694b      	ldreq	r3, [r1, #20]
 80052ba:	eba6 0807 	sub.w	r8, r6, r7
 80052be:	600f      	str	r7, [r1, #0]
 80052c0:	608b      	str	r3, [r1, #8]
 80052c2:	f1b8 0f00 	cmp.w	r8, #0
 80052c6:	dd9c      	ble.n	8005202 <__sflush_r+0x1a>
 80052c8:	4643      	mov	r3, r8
 80052ca:	463a      	mov	r2, r7
 80052cc:	6a21      	ldr	r1, [r4, #32]
 80052ce:	4628      	mov	r0, r5
 80052d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052d2:	47b0      	blx	r6
 80052d4:	2800      	cmp	r0, #0
 80052d6:	dc06      	bgt.n	80052e6 <__sflush_r+0xfe>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	e78e      	b.n	8005204 <__sflush_r+0x1c>
 80052e6:	4407      	add	r7, r0
 80052e8:	eba8 0800 	sub.w	r8, r8, r0
 80052ec:	e7e9      	b.n	80052c2 <__sflush_r+0xda>
 80052ee:	bf00      	nop
 80052f0:	20400001 	.word	0x20400001

080052f4 <_fflush_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	690b      	ldr	r3, [r1, #16]
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	b1db      	cbz	r3, 8005336 <_fflush_r+0x42>
 80052fe:	b118      	cbz	r0, 8005308 <_fflush_r+0x14>
 8005300:	6983      	ldr	r3, [r0, #24]
 8005302:	b90b      	cbnz	r3, 8005308 <_fflush_r+0x14>
 8005304:	f7ff f9c8 	bl	8004698 <__sinit>
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <_fflush_r+0x48>)
 800530a:	429c      	cmp	r4, r3
 800530c:	d109      	bne.n	8005322 <_fflush_r+0x2e>
 800530e:	686c      	ldr	r4, [r5, #4]
 8005310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005314:	b17b      	cbz	r3, 8005336 <_fflush_r+0x42>
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800531e:	f7ff bf63 	b.w	80051e8 <__sflush_r>
 8005322:	4b07      	ldr	r3, [pc, #28]	; (8005340 <_fflush_r+0x4c>)
 8005324:	429c      	cmp	r4, r3
 8005326:	d101      	bne.n	800532c <_fflush_r+0x38>
 8005328:	68ac      	ldr	r4, [r5, #8]
 800532a:	e7f1      	b.n	8005310 <_fflush_r+0x1c>
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <_fflush_r+0x50>)
 800532e:	429c      	cmp	r4, r3
 8005330:	bf08      	it	eq
 8005332:	68ec      	ldreq	r4, [r5, #12]
 8005334:	e7ec      	b.n	8005310 <_fflush_r+0x1c>
 8005336:	2000      	movs	r0, #0
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	bf00      	nop
 800533c:	08005568 	.word	0x08005568
 8005340:	08005588 	.word	0x08005588
 8005344:	08005548 	.word	0x08005548

08005348 <_lseek_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4605      	mov	r5, r0
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	2200      	movs	r2, #0
 8005352:	4c05      	ldr	r4, [pc, #20]	; (8005368 <_lseek_r+0x20>)
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7fd ff25 	bl	80031a6 <_lseek>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_lseek_r+0x1e>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	b103      	cbz	r3, 8005366 <_lseek_r+0x1e>
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	20000398 	.word	0x20000398

0800536c <__swhatbuf_r>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	460e      	mov	r6, r1
 8005370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005374:	b096      	sub	sp, #88	; 0x58
 8005376:	2900      	cmp	r1, #0
 8005378:	4614      	mov	r4, r2
 800537a:	461d      	mov	r5, r3
 800537c:	da07      	bge.n	800538e <__swhatbuf_r+0x22>
 800537e:	2300      	movs	r3, #0
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	89b3      	ldrh	r3, [r6, #12]
 8005384:	061a      	lsls	r2, r3, #24
 8005386:	d410      	bmi.n	80053aa <__swhatbuf_r+0x3e>
 8005388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538c:	e00e      	b.n	80053ac <__swhatbuf_r+0x40>
 800538e:	466a      	mov	r2, sp
 8005390:	f000 f884 	bl	800549c <_fstat_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	dbf2      	blt.n	800537e <__swhatbuf_r+0x12>
 8005398:	9a01      	ldr	r2, [sp, #4]
 800539a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800539e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053a2:	425a      	negs	r2, r3
 80053a4:	415a      	adcs	r2, r3
 80053a6:	602a      	str	r2, [r5, #0]
 80053a8:	e7ee      	b.n	8005388 <__swhatbuf_r+0x1c>
 80053aa:	2340      	movs	r3, #64	; 0x40
 80053ac:	2000      	movs	r0, #0
 80053ae:	6023      	str	r3, [r4, #0]
 80053b0:	b016      	add	sp, #88	; 0x58
 80053b2:	bd70      	pop	{r4, r5, r6, pc}

080053b4 <__smakebuf_r>:
 80053b4:	898b      	ldrh	r3, [r1, #12]
 80053b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053b8:	079d      	lsls	r5, r3, #30
 80053ba:	4606      	mov	r6, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	d507      	bpl.n	80053d0 <__smakebuf_r+0x1c>
 80053c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	2301      	movs	r3, #1
 80053ca:	6163      	str	r3, [r4, #20]
 80053cc:	b002      	add	sp, #8
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	ab01      	add	r3, sp, #4
 80053d2:	466a      	mov	r2, sp
 80053d4:	f7ff ffca 	bl	800536c <__swhatbuf_r>
 80053d8:	9900      	ldr	r1, [sp, #0]
 80053da:	4605      	mov	r5, r0
 80053dc:	4630      	mov	r0, r6
 80053de:	f7ff fd3d 	bl	8004e5c <_malloc_r>
 80053e2:	b948      	cbnz	r0, 80053f8 <__smakebuf_r+0x44>
 80053e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e8:	059a      	lsls	r2, r3, #22
 80053ea:	d4ef      	bmi.n	80053cc <__smakebuf_r+0x18>
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	e7e3      	b.n	80053c0 <__smakebuf_r+0xc>
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <__smakebuf_r+0x7c>)
 80053fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	6020      	str	r0, [r4, #0]
 8005400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	9b00      	ldr	r3, [sp, #0]
 8005408:	6120      	str	r0, [r4, #16]
 800540a:	6163      	str	r3, [r4, #20]
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	b15b      	cbz	r3, 8005428 <__smakebuf_r+0x74>
 8005410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005414:	4630      	mov	r0, r6
 8005416:	f000 f853 	bl	80054c0 <_isatty_r>
 800541a:	b128      	cbz	r0, 8005428 <__smakebuf_r+0x74>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	431d      	orrs	r5, r3
 800542c:	81a5      	strh	r5, [r4, #12]
 800542e:	e7cd      	b.n	80053cc <__smakebuf_r+0x18>
 8005430:	08004661 	.word	0x08004661

08005434 <__ascii_mbtowc>:
 8005434:	b082      	sub	sp, #8
 8005436:	b901      	cbnz	r1, 800543a <__ascii_mbtowc+0x6>
 8005438:	a901      	add	r1, sp, #4
 800543a:	b142      	cbz	r2, 800544e <__ascii_mbtowc+0x1a>
 800543c:	b14b      	cbz	r3, 8005452 <__ascii_mbtowc+0x1e>
 800543e:	7813      	ldrb	r3, [r2, #0]
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	1c10      	adds	r0, r2, #0
 8005446:	bf18      	it	ne
 8005448:	2001      	movne	r0, #1
 800544a:	b002      	add	sp, #8
 800544c:	4770      	bx	lr
 800544e:	4610      	mov	r0, r2
 8005450:	e7fb      	b.n	800544a <__ascii_mbtowc+0x16>
 8005452:	f06f 0001 	mvn.w	r0, #1
 8005456:	e7f8      	b.n	800544a <__ascii_mbtowc+0x16>

08005458 <__malloc_lock>:
 8005458:	4770      	bx	lr

0800545a <__malloc_unlock>:
 800545a:	4770      	bx	lr

0800545c <_read_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4605      	mov	r5, r0
 8005460:	4608      	mov	r0, r1
 8005462:	4611      	mov	r1, r2
 8005464:	2200      	movs	r2, #0
 8005466:	4c05      	ldr	r4, [pc, #20]	; (800547c <_read_r+0x20>)
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	f7fd fe5a 	bl	8003124 <_read>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_read_r+0x1e>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	b103      	cbz	r3, 800547a <_read_r+0x1e>
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	20000398 	.word	0x20000398

08005480 <__ascii_wctomb>:
 8005480:	b149      	cbz	r1, 8005496 <__ascii_wctomb+0x16>
 8005482:	2aff      	cmp	r2, #255	; 0xff
 8005484:	bf8b      	itete	hi
 8005486:	238a      	movhi	r3, #138	; 0x8a
 8005488:	700a      	strbls	r2, [r1, #0]
 800548a:	6003      	strhi	r3, [r0, #0]
 800548c:	2001      	movls	r0, #1
 800548e:	bf88      	it	hi
 8005490:	f04f 30ff 	movhi.w	r0, #4294967295
 8005494:	4770      	bx	lr
 8005496:	4608      	mov	r0, r1
 8005498:	4770      	bx	lr
	...

0800549c <_fstat_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	2300      	movs	r3, #0
 80054a0:	4c06      	ldr	r4, [pc, #24]	; (80054bc <_fstat_r+0x20>)
 80054a2:	4605      	mov	r5, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	f7fd fe63 	bl	8003174 <_fstat>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d102      	bne.n	80054b8 <_fstat_r+0x1c>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	b103      	cbz	r3, 80054b8 <_fstat_r+0x1c>
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	bd38      	pop	{r3, r4, r5, pc}
 80054ba:	bf00      	nop
 80054bc:	20000398 	.word	0x20000398

080054c0 <_isatty_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	2300      	movs	r3, #0
 80054c4:	4c05      	ldr	r4, [pc, #20]	; (80054dc <_isatty_r+0x1c>)
 80054c6:	4605      	mov	r5, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	f7fd fe61 	bl	8003192 <_isatty>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_isatty_r+0x1a>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	b103      	cbz	r3, 80054da <_isatty_r+0x1a>
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20000398 	.word	0x20000398

080054e0 <_init>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr

080054ec <_fini>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr
